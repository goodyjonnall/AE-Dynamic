app.purge(PurgeTarget.ALL_CACHES);/*  START SCRIPT  */function scriptMain() {    /*  OBJECTS */    var assets = {        folders: {           activeComps: app.project.item(1),            x: {           }        },        items: {            currentClip: {            },            currentAudio: {            },            prevClip: {            },            currentSprite: {            },            currentMasterSprite: {            },            currentBody: {            },            temporary: {                currentSpriteFrames: [],                comps: [],                folderItems: [],                OSFolders: []            }        },        data: {            currentClip: new Array(),            currentScene: "",            currentAudio: new Array(),            currentSprite: {            },            currentValue: {            }        },        renderFileObjs: {            currentAudio: [],            currentSprite: [],            currentMasterSprite: [],            currentBody: []        },        specs: {            currentLength: {                seconds: {                },                frames: {                }            },            currentFrames: {                perSecond: {                },                length: {                }            },            images: {                gap: 0,                currentWidth: {                },                currentHeight: {                },                currentLength: {                },                FPS: {                }            },            audio: {                gap: 0.5            }        }    };    var plugin = {        locations: {            script: (new File($.fileName)).parent,            projectPath: app.project.file.path,            systemFolders: {                main: {                },                currentScene: {                },                currentClips: {                },                currentAudio: {                },                currentSprite: {                },                currentSpriteTemp: {                },                currentBody: {                }            },            systemFiles: {                jsonAudio: [],                jsonClips: []             }        }    };        var specs = {        name: {            prefix:"export_",             date: {                all: "x",                 string: "x",                 year: "x",                 month: "x",                day: "x",                hour: "x",                min: "x",                sec: "x"                }            },        };             /*  CHECKS ACTIVE COMPS FOLDER   */    if ( !(assets.folders.activeComps instanceof FolderItem) || assets.folders.activeComps.name != "001_Active_Comps" ) {        alert("Please follow naming Protocol: \r First item is not a folder named '001_Active_Comps' ");           } else {                /*  CREATES MAIN (SYSTEM) FOLDER    */        specs.name.date.all = new Date(Date(0));        specs.name.date.year = (specs.name.date.all.getFullYear()).toString().slice(2,4);        if ((specs.name.date.all.getMonth()).toString().length == 1 && specs.name.date.all.getMonth() != 9) {            specs.name.date.month =  "0" +  ((specs.name.date.all.getMonth() + 1).toString());            }else if (specs.name.date.all.getMonth() == 9) {            specs.name.date.month = ((specs.name.date.all.getMonth() + 1).toString());            } else {            specs.name.date.month = (specs.name.date.all.getMonth()).toString();            };                if ((specs.name.date.all.getDate()).toString().length == 1) {            specs.name.date.day =  "0" +  ((specs.name.date.all.getDate() + 1).toString());            } else {            specs.name.date.day = (specs.name.date.all.getDate()).toString();            };                if ((specs.name.date.all.getHours()).toString().length == 1) {            specs.name.date.hour =  "0" +  ((specs.name.date.all.getHours()).toString());            } else {            specs.name.date.hour = (specs.name.date.all.getHours()).toString();            };                if ((specs.name.date.all.getMinutes()).toString().length == 1) {            specs.name.date.min =  "0" +  ((specs.name.date.all.getMinutes()).toString());            } else {            specs.name.date.min = (specs.name.date.all.getMinutes()).toString();            };        if ((specs.name.date.all.getSeconds()).toString().length == 1) {            specs.name.date.sec =  "0" +  ((specs.name.date.all.getSeconds()).toString());            } else {            specs.name.date.sec = (specs.name.date.all.getSeconds()).toString();            };                       specs.name.date.all = specs.name.date.year + specs.name.date.month + specs.name.date.day + "-"+ specs.name.date.hour + specs.name.date.min + "-"+ specs.name.date.sec;            plugin.locations.systemFolders.main = new Folder (plugin.locations.projectPath + "/exports_" + specs.name.date.all).create();        /*  LOOPS THROUGH SCENES    */        for (i = 1; i <= assets.folders.activeComps.numItems; i++) {                /*  CREATES SCENE (SYSTEM) FOLDER    */        plugin.locations.systemFolders.currentScene = new Folder (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name).create();                /*  CREATES CLIPS / AUDIO / SPRITE (SYSTEM) FOLDERS */        plugin.locations.systemFolders.currentClips = new Folder (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "001_Clips").create();        plugin.locations.systemFolders.currentAudio = new Folder (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "002_Audio").create();        plugin.locations.systemFolders.currentSprite = new Folder (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "003_Sprite").create();        plugin.locations.systemFolders.currentBody = new Folder (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "004_Body").create();        plugin.locations.systemFolders.currentSpriteTemp = new Folder (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "003_Sprite" + "/" + "temp").create();        assets.items.temporary.OSFolders.push(plugin.locations.systemFolders.currentSpriteTemp);                /*  RUN COMP DATA - ADD TO JSON  */                        if(assets.folders.activeComps.item(i).item(1)){                /*  WRITE JSON START CODE */               assets.data.currentScene += "var data = [";                                   /*  PROGRESS BAR    */                        var progressPaletteA = new Window ("palette", "Lip Sync Data Exporter");                            progressPaletteA.margins = [20,20,20,20];                            progressPaletteA.graphics.backgroundColor = progressPaletteA.graphics.newBrush (progressPaletteA.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR\                            progressPaletteA.alignChildren = "left";                            var imageFolderA = plugin.locations.script.toString() + "/lipSync/";                            var headerA = progressPaletteA.add ("image", undefined, File (imageFolderA + "processing.jpg"));                            var progressTitleA = progressPaletteA.add ("statictext", undefined, "Preparing Clips For Export - One Moment Please.");                            var progressBarA = progressPaletteA.add ("progressbar", undefined, 1,assets.specs.currentFrames.length);                               progressBarA.preferredSize = [438, 20];                            progressPaletteA.show();                                                          /*  LOOP THROUGH CLIPS*/                        for (j = 1; j <= assets.folders.activeComps.item(i).item(1).numItems; j++) {                                                         /*  WRITE JSON CLIP START CODE */                            assets.data.currentScene += " [";                            assets.specs.currentLength.seconds = assets.folders.activeComps.item(i).item(1).item(j).duration;                            assets.specs.currentFrames.perSecond = assets.folders.activeComps.item(i).item(1).item(j).frameRate;                            assets.specs.currentLength.frames = (1/assets.specs.currentFrames.perSecond);                            assets.specs.currentFrames.length = (assets.specs.currentLength.seconds / assets.specs.currentLength.frames);                                                            progressTitleA.text = "Lip-Syncing Data: " + assets.folders.activeComps.item(i).name + " - " + assets.folders.activeComps.item(i).item(1).item(j).name;                                                            /*  ANALYSE AUDIO   */                            function analyseAudio() {                                var audioData = {                                    arrays: {                                        isGap: new Array,                                        cumulative: new Array,                                        position: new Array                                    },                                    values: {                                        general: {                                            framesInMovement: 5                                        },                                        current: {                                            amplitude: {                                            },                                            processed: {                                            },                                            isGap: {                                            },                                            output: {                                            },                                            position: {                                            }                                        },                                        previous: {                                            amplitude: {                                            },                                            processed: {                                            }                                        }                                    }                                };                                                                        /*  LOOP THROUGH LAYER*/                                for (k = 0; k <= assets.specs.currentFrames.length; k++) {                                                                        /* AMP CURRENT  */                                    audioData.values.current.amplitude = assets.folders.activeComps.item(i).item(1).item(j).layer(1) ("Effects").property("Both Channels").property("Slider").valueAtTime((k/assets.specs.currentFrames.perSecond),0);                                                                       /*   AMP PREVIOUS (IF FIRST FRAME)    */                                    if (k == 0) {                                        audioData.values.previous.amplitude = 0;                                    } else {                                        audioData.values.previous.amplitude = assets.folders.activeComps.item(i).item(1).item(j).layer(1) ("Effects").property("Both Channels").property("Slider").valueAtTime((k/assets.specs.currentFrames.perSecond) - (1 / assets.specs.currentFrames.perSecond) ,0);                                    };                                                                        /*  PROCESS AUDIO  */                                    audioData.values.current.processed = Math.floor((audioData.values.current.amplitude/18)*audioData.values.general.framesInMovement) + 1;                                                                        if (audioData.values.current.processed >= 19) {                                        audioData.values.current.processed = 19;                                    } else {};                                                                        audioData.values.previous.processed = Math.floor((audioData.values.previous.amplitude/18)*audioData.values.general.framesInMovement) + 1;                                                                        if (audioData.values.previous.processed >= 19) {                                        audioData.values.previous.processed = 19;                                    } else {};                                                                    /*  GAP DETECTION   */                                                                       if (audioData.values.current.processed == 1) {                                        if (audioData.values.previous.processed != 1) {                                            audioData.values.current.isGap = 1;                                        } else {                                            audioData.values.current.isGap = 0;                                        };                                    } else {                                        audioData.values.current.isGap = 0;                                    };                                                                    audioData.arrays.isGap.push(audioData.values.current.isGap);                                                                        /*  CUMLATIVE   */                                                                        if (k == 0) {                                        audioData.arrays.cumulative.push(1);                                    } else {                                        if (audioData.values.current.isGap == 1) {                                            var mod = audioData.arrays.cumulative[k-1] + 1;                                            audioData.arrays.cumulative.push(mod);                                        } else {                                            audioData.arrays.cumulative.push(audioData.arrays.cumulative[k-1]);                                        };                                    };                                                                        /*  ALTERNATION - FINAL VAL  */                                    if (audioData.values.current.output > 6) {                                        audioData.values.current.output = 6;                                    } else {};                                                                        if (audioData.arrays.cumulative[k] % 2 == 0) {                                        audioData.values.current.output = audioData.values.current.processed;                                    } else {                                        audioData.values.current.output = audioData.values.current.processed + 6;                                    };                                                                            if (audioData.values.current.output > 12) {                                        audioData.values.current.output = 12;                                    } else {};                                     assets.data.currentClip.push(" " + audioData.values.current.output);                                                                    /*  PROGRESS BAR    */                                    if (progressBarA.value < assets.specs.currentFrames.length){                                        progressBarA.value = progressBarA.value+ 1;                                    }else{};                                                                } // K                                                            /*  PROGRESS BAR    */                                 progressBarA.value = 0;                            } // ANALYSE AUDIO FUNCTION - END                                                        analyseAudio();                                                        /*  WRITE OBJECTS TO JSON   */                            assets.data.currentScene += assets.data.currentClip.toString();                            assets.data.currentClip = [];                            if (j == assets.folders.activeComps.item(i).item(1).numItems) {                                assets.data.currentScene += "]";                            } else {                                 assets.data.currentScene += "],";                            };                                                        } // J                                                  /*  PROGRESS BAR    */                        progressTitleA.text = "Writing JSON Files.. this will take minute";                                                /*  WRITE JSON END CODE */                        assets.data.currentScene += "];";                        progressTitleA.text = "Writing Files To System";                        /*  WRITE TO  JSON*/                        plugin.locations.systemFiles.jsonClips[i] = new File(plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "001_Clips" + "/"+"DataFile.txt");                                    plugin.locations.systemFiles.jsonClips[i].open('w');                            plugin.locations.systemFiles.jsonClips[i].write(assets.data.currentScene);                        plugin.locations.systemFiles.jsonClips[i].close();                             assets.data.currentScene = "";                                } else {                alert("not exisits");            };                     } //I        /*  PROGRESS BAR CLOSE*/        progressPaletteA.close();                /*  CREATE AND RUN AUDIO COMP  */                /*  PROGRESS BAR    */        var progressPaletteB = new Window ("palette", "Lip Sync Data Exporter");            progressPaletteB.margins = [20,20,20,20];            progressPaletteB.graphics.backgroundColor = progressPaletteB.graphics.newBrush (progressPaletteB.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR\            progressPaletteB.alignChildren = "left";            var imageFolderB = plugin.locations.script.toString() + "/lipSync/";            var headerB = progressPaletteB.add ("image", undefined, File (imageFolderB + "processing.jpg"));            var progressTitleB = progressPaletteB.add ("statictext", undefined, "Preparing Clips For Export - One Moment Please.");            var progressBarB = progressPaletteB.add ("progressbar", undefined, 1,((assets.folders.activeComps.numItems*2) + 4));               progressBarB.preferredSize = [438, 20];            progressPaletteB.show();                  /*  LOOPS THROUGH SCENES    */        for (i = 1; i <= assets.folders.activeComps.numItems; i++) {                /*  PROGRESS BAR    */        progressTitleB.text = "Audio Data: " + assets.folders.activeComps.item(i).name;                if (progressBarB.value < assets.folders.activeComps.numItems){            progressBarB.value = progressBarB.value+ 1;        }else{};            /*  IDENTIFY AUDIO COMP*/            assets.items.currentAudio= app.project.items.addComp("audio", 50, 50, 1, 1, 1);            assets.items.currentAudio.parentFolder = assets.folders.activeComps.item(i).item(2);                              assets.items.currentAudio.frameRate = assets.folders.activeComps.item(i).item(1).item(1).frameRate;            var cumulativeAudio;            var currentAudioLayer;                            /*  LOOP THROUGH CLIPS*/                for (j = 1; j <= assets.folders.activeComps.item(i).item(1).numItems; j++) {                                        assets.items.currentClip = assets.folders.activeComps.item(i).item(1).item(j);                    currentAudioLayer = assets.items.currentAudio.layers.add(assets.items.currentClip);                                            if (j == 1) {                            cumulativeAudio = 0;                        } else {                            cumulativeAudio += assets.items.prevClipDur + assets.specs.audio.gap; // AUDIO GAP                        };                                    assets.data.currentAudio.push(cumulativeAudio);                    currentAudioLayer.startTime = cumulativeAudio;                                                            if (j == assets.folders.activeComps.item(i).item(1).numItems) {                        assets.data.currentAudio.push(assets.items.currentClip.duration + cumulativeAudio);                                                assets.items.currentAudio.duration = (assets.items.currentClip.duration + cumulativeAudio);                    } else {};                                        assets.items.prevClipDur = assets.items.currentClip.duration;                                        } // J                                      /*  WRITE JSON END CODE */                /*  PROGRESS BAR    */                progressTitleB.text = "Writing Files To System";                progressBarB.value = progressBarB.valueB+ 1;                                /* CREATES JSON CODE */                assets.data.currentScene = "var data = [" + assets.data.currentAudio.toString() + "];";                                /* CLEARS SCENE AUDIO DATA  */                assets.data.currentAudio = [];                cumulativeAudio = 0;                                /*  WRITE TO  JSON*/                plugin.locations.systemFiles.jsonAudio[i] = new File(plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "002_Audio" + "/"+"DataFile.txt");                        plugin.locations.systemFiles.jsonAudio[i].open('w');                    plugin.locations.systemFiles.jsonAudio[i].write(assets.data.currentScene);                plugin.locations.systemFiles.jsonAudio[i].close();                     assets.data.currentScene = "";                                /*  PROGRESS BAR    */                progressBarB.value = progressBarB.value+ 1;                                /*  ADDS AUDIO TO RENDER QUEUE & SETS SETTINGS   */                                app.project.renderQueue.items.add(assets.items.currentAudio);                app.project.renderQueue.item(i).outputModule(1).applyTemplate("WAV - LipSyncPlug");                                assets.renderFileObjs.currentAudio[i] = new File(plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "002_Audio" + "/"+"audio.wav");                app.project.renderQueue.item(i).outputModule(1).file = assets.renderFileObjs.currentAudio[i];                             } // I                /*  STARTS RENDER  - AUDIO   */        progressBarB.value = progressBarB.value+ 1;        app.project.renderQueue.render();                        /*  CLEARS RENDER QUEUE - IMAGES   */        while (1 <= app.project.renderQueue.numItems) {            app.project.renderQueue.item(1).remove();        }        /*  LOOPS THROUGH SCENES    */        for (i = 1; i <= assets.folders.activeComps.numItems; i++) {                        /*  REMOVES AUDIO COMP  */            assets.folders.activeComps.item(i).item(2).item(1).remove();                    }                /*  PROGRESS BAR CLOSE - AUDIO  */        progressPaletteB.close();        /*  IMAGE SPRITE START   */                /*  PROGRESS BAR    */        var progressPaletteC = new Window ("palette", "Lip Sync Data Exporter");            progressPaletteC.margins = [20,20,20,20];            progressPaletteC.graphics.backgroundColor = progressPaletteC.graphics.newBrush (progressPaletteC.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR\            progressPaletteC.alignChildren = "left";            var imageFolderC = plugin.locations.script.toString() + "/lipSync/";            var headerC = progressPaletteC.add ("image", undefined, File (imageFolderC + "processing.jpg"));            var progressTitleC = progressPaletteC.add ("statictext", undefined, "Sprite Creation and Export.");            var progressBarC = progressPaletteC.add ("progressbar", undefined, 1,((assets.folders.activeComps.numItems) + 5));               progressBarC.preferredSize = [438, 20];            progressPaletteC.show();                  /*  LOOPS THROUGH SCENES    */        for (i = 1; i <= assets.folders.activeComps.numItems; i++) {                            if (progressBarC.value < assets.folders.activeComps.numItems){            progressBarC.value = progressBarC.value+ 1;            }else{};                        /* EXPORT - PNG SEQUENCE  - MAKE FOLDER  */             assets.items.currentSprite = assets.folders.activeComps.item(i).item(3).item(1);                            /*  ADDS IMAGES TO RENDER QUEUE & SETS SETTINGS   */                app.project.renderQueue.items.add(assets.items.currentSprite);                app.project.renderQueue.item(i).outputModule(1).applyTemplate("PNG - LipSyncPlug");                                assets.renderFileObjs.currentSprite[i] = new File(plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "003_Sprite" + "/" + "temp" + "/" + "sprite_[#####]");                app.project.renderQueue.item(i).outputModule(1).file = assets.renderFileObjs.currentSprite[i];                                        }; // I            /*  STARTS RENDER  - IMAGES   */        app.project.renderQueue.render();        /*  PROGRESS BAR  */        progressBarC.value = progressBarC.value+ 1;                /*  CLEARS RENDER QUEUE - IMAGES   */        while (1 <= app.project.renderQueue.numItems) {            app.project.renderQueue.item(1).remove();        }        /*  PROGRESS BAR  */        progressBarC.value = progressBarC.value+ 1;        /*  LOOPS THROUGH  SCENES    */        for (i = 1; i <= assets.folders.activeComps.numItems; i++) {                           /* SPRITE SPECS */            assets.specs.images.currentWidth = assets.folders.activeComps.item(i).item(3).item(1).width;            assets.specs.images.currentHeight = assets.folders.activeComps.item(i).item(3).item(1).height;            assets.specs.images.currentLength = assets.folders.activeComps.item(i).item(3).item(1).duration;            assets.specs.images.currentFPS = assets.folders.activeComps.item(i).item(3).item(1).frameRate;                        /*  CREATES TEMPORATY SPRITE COMPS  */            assets.items.temporary.comps[i] = app.project.items.addComp("sprite_temp", assets.specs.images.currentWidth, assets.specs.images.currentHeight, 1, 1, 1);            assets.items.temporary.comps[i].parentFolder = assets.folders.activeComps.item(i).item(3);                        /*  CREATES TEMPORATY SPRITE FOLDER (ITEM)  */            assets.items.temporary.folderItems[i] = app.project.items.addFolder("Temporary Sprite Folder");            assets.items.temporary.folderItems[i].parentFolder = assets.folders.activeComps.item(i).item(3);                        assets.items.temporary.comps[i].width = (assets.specs.images.currentLength * assets.specs.images.currentFPS) * assets.specs.images.currentWidth;                                    /*  LOOPS THROUGH  LAYERS - RE-IMPORTING ARTWORK    */            for (j = 0; j < (assets.specs.images.currentLength * assets.specs.images.currentFPS); j++) {                if (j < 10) {                     assets.items.temporary.currentSpriteFrames[j] = app.project.importFile(new ImportOptions (File (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "003_Sprite" + "/" + "temp" + "/" + "sprite_0000" + j + ".png")));                } else if (j >= 10 && j < 100) {                    assets.items.temporary.currentSpriteFrames[j] = app.project.importFile(new ImportOptions (File (plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "003_Sprite" + "/" + "temp" + "/" + "sprite_000" + j + ".png")));                } else {                    alert("Sprite Import Function currently supports less than 100 frames");                };            assets.items.temporary.currentSpriteFrames[j].parentFolder = assets.items.temporary.folderItems[i];                        assets.items.temporary.comps[i].layers.add(assets.items.temporary.currentSpriteFrames[j]);                        assets.items.temporary.comps[i].layer(1).position.setValue([(j * assets.specs.images.currentWidth), 0]);            assets.items.temporary.comps[i].layer(1).anchorPoint.setValue([0, 0]);            assets.items.temporary.currentSpriteFrames = [];            }; // J                                      /*  EXPORT MASTER SPRITES  */              assets.items.currentMasterSprite = assets.folders.activeComps.item(i).item(3).item(2);                            /*  ADDS IMAGES TO RENDER QUEUE & SETS SETTINGS   */                app.project.renderQueue.items.add(assets.items.currentMasterSprite);                app.project.renderQueue.item(i).outputModule(1).applyTemplate("PNG - LipSyncPlug");                                assets.renderFileObjs.currentMasterSprite[i] = new File(plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "003_Sprite" + "/" + "sprite_[#####]");                app.project.renderQueue.item(i).outputModule(1).file = assets.renderFileObjs.currentMasterSprite[i];                                        } // I            /*  PROGRESS BAR  */        progressBarC.value = progressBarC.value+ 1;                /*  STARTS RENDER  - MASTER SPRITES   */        app.project.renderQueue.render();        /*  CLEARS RENDER QUEUE - MASTER SPRITES   */        while (1 <= app.project.renderQueue.numItems) {            app.project.renderQueue.item(1).remove();        }        /*  LOOPS THROUGH  SCENES    */        for (i = 1; i <= assets.folders.activeComps.numItems; i++) {                        /*  CLEAN UP TEMPORARY SPRITE FILES  */            assets.folders.activeComps.item(i).item(3).item(3).remove();            assets.folders.activeComps.item(i).item(3).item(2).remove();                } // I            /*  PROGRESS BAR  */        progressBarC.value = progressBarC.value+ 1;                /*  LOOPS THROUGH  SCENES    */        for (i = 1; i <= assets.folders.activeComps.numItems; i++) {                        /*  EXPORT BODY  */            assets.items.currentBody = assets.folders.activeComps.item(i).item(4).item(1);                        /*  ADDS IMAGES TO RENDER QUEUE & SETS SETTINGS   */                app.project.renderQueue.items.add(assets.items.currentBody);                app.project.renderQueue.item(i).outputModule(1).applyTemplate("PNG - LipSyncPlug");                                assets.renderFileObjs.currentBody[i] = new File(plugin.locations.projectPath + "/exports_" + specs.name.date.all + "/" + assets.folders.activeComps.item(i).name + "/" + "004_Body" + "/" + "body_[#####]");                app.project.renderQueue.item(i).outputModule(1).file = assets.renderFileObjs.currentBody[i];                                       } // I            /*  PROGRESS BAR  */        progressBarC.value = progressBarC.value+ 1;                /*  STARTS RENDER  - BODY   */        app.project.renderQueue.render();        /*  CLEARS RENDER QUEUE - BODY   */        while (1 <= app.project.renderQueue.numItems) {            app.project.renderQueue.item(1).remove();        }        /*  PROGRESS BAR CLOSE - IMAGES  */        progressPaletteC.close();        /*  SCRIPT FINNISHED ALERT    */        var scriptEndX = new Window ("palette", "Lip Sync Data Exporter");            scriptEndX.margins = [20,20,20,20];            scriptEndX.graphics.backgroundColor = scriptEndX.graphics.newBrush (scriptEndX.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR\            scriptEndX.alignChildren = "left";            var imageFolderX = plugin.locations.script.toString() + "/lipSync/";            var headerX = scriptEndX.add ("image", undefined, File (imageFolderX + "complete.jpg"));            var buttonEndX = scriptEndX.add("button", [0,0,440,40], "OK");                        buttonEndX.onClick = function() {                scriptEndX.close();                app.purge(PurgeTarget.ALL_CACHES);            };                                            scriptEndX.show();    }; // VALIDATION (IF) ENDS}; // SCRIPT MAIN END/*  INITIALISER  */function runScript () {        var plugin = {        locations: {            script: (new File($.fileName)).parent        }    };        /*  SCRIPT UI  */    var runPluginsUI = new Window ("palette", "Lip Sync Data Exporter");     runPluginsUI.margins = [20,20,20,20];    runPluginsUI.graphics.backgroundColor = runPluginsUI.graphics.newBrush (runPluginsUI.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR        var imageFolder = plugin.locations.script.toString() + "/lipSync/";        var header = runPluginsUI.add ("image", undefined, File (imageFolder + "header.jpg"));            var lineOne = runPluginsUI. add ("group");    var runButton = lineOne.add("button", [0,0,440,40], "Run Plugin");        runButton.onClick = function () {        runPluginsUI.close();        scriptMain();        };    runPluginsUI.show();    };function primaryVerification() {    /*  CLEARS RENDER QUEUE - IMAGES   */    while (1 <= app.project.renderQueue.numItems) {        app.project.renderQueue.item(1).remove();    }    /*   VERIFY OUTPUT MODULES   */    app.project.renderQueue.items.add(app.project.item(1).item(1).item(1).item(1));    var templatesList = app.project.renderQueue.item(1).outputModule(1).templates.toString();    app.project.renderQueue.item(1).remove();        var wavOccurance = templatesList.indexOf("WAV - LipSyncPlug");    var pngOccurance = templatesList.indexOf("PNG - LipSyncPlug");        if (wavOccurance < 0 || pngOccurance < 0) {        alert("Output Module Templates Missing \r Templates file can be found here:\r" + app.project.file.path + "/lipSync/OutputModule/lipSyncOMT.aom" + "\r \rInstall here:\rRender Queue> Output Module Dropdown > Make Template > Load \r(Select the Template file)");    } else {};    }primaryVerification();runScript ();