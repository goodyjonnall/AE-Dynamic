// START SCRIPTfunction EJODOne () {    // ARCHITECTURAL VARIABLES    var activeSubPoject; // THE COMP THAT IS CURRENTLY ACTIVE (OPEN)     var activeSubProjectItem; // THE ARRAY- OF ITEMS IN PROJECT PANE - POSITION OF THE SUBPROJECT FOLDER INSIDE THIS PLUINS FOLDER    var updateProject; // BOOLEAN - IS THE UPDATE LOOP RUNNING?    var newProject; // BOOLEAN - IS A NEW PROJECT BEING CONSTRUCTED?    var projectItemFolder; // THE FOLDER FOR THIS PLUGIN    var projectItemSubFolder; // THE FOLDER FOR THE ACTIVE SUBPROJECT    var pluginArrayPosition; // THE ARRAY - OF ITEMS IN PROJECT PANE - POSITION IN THE PLUGIN FOLDER FOR THIS PLUGIN    var projectItemAssetFolder; // THE FOLDER CONTAINING ASSSETS USED BY THE PLUGIN        // PRIMARY VARIABLES        // SCRIPT INFO        var scriptName = "EJOD001"; // ID GIVEN TO THIS SCRIPT        var scriptVersionNumber = 0.1;        var scriptVersionValid; // IS THIS PROJECT BUILT WITH  A (NOW) VALID SCRIPT VERSION        var scriptDirectory = "/Applications/Adobe After Effects CS5/Scripts/ScriptUI Panels/"; // THE LOCATION OF THE SCRIPT FOLDER        // PROJECT INFO        var projectPath = app.project.file.path; // THE FILE SYSTEM (OSX/WIN) PATH OF THE PROJECT        var projectNameExt = app.project.file.name; // THE NAME OF THE AEP INCLUDING FILE EXTENTION (.AEP)        var projectName = projectNameExt.substr(0, projectNameExt.length - 4); // THE NAME OF THE AEP EXCLUDING FILE EXTENTION (.AEP)        var projectVersionNumber; // THE VERSION NUMBER OF THE SCRIPT  CURRENTLY RUNNING        var projectOriginalVersionNumber; // THE VERSION NUMBER OF THE SCRIPT  THIS PROJECT WAS BUILT WITH        // DATABASES        var coreDataName = File (projectPath+"/"+projectName+"_"+"coreDatabase"+"_"+scriptName+".xml"); // CORE DATABASE FILE        var versionDataName = File (projectPath+"/"+projectName+"_"+"versionDatabase"+"_"+scriptName+".xml"); // VERSION DATABASE FILE        var presetsDataName = File (projectPath+"/"+projectName+"_"+"presetsDatabase"+"_"+scriptName+".xml"); // PRESETS DATABSE FILE                var coreDatabaseActiveIndex; // THE XML ARRAY INDEX OF THE DATASET CONTAING THE DATA FOR THE CURRENT SUB PROJECT        // PRESETS NAMES        var presetsNamesArray = new Array();         var presetsNamesArrayLength;        var selectedPreset;                 // CORE DATASET NAMES        var coreNamesArray = new Array();         var coreNamesArrayLength;        var selectedCoreDataset;                       // PROJECT (ITEMS)                                // SUB-PROJECT INFO                var sP_name;        var sP_ID; // THE UNIQUE ID GIVEN TO EACH SUB PROJECT        var sP_projectNumber; // THE PAPRIKA JOB NUMBER - FOR BILLING        var sP_creativeTitle; // THE CREATIVE ARTWORK THEME        var sP_location; // THE LOCTATION OF THE OUTDOOR SCREEN        var sP_compWidth;        var sP_compHeight;        var sP_compLength; // LENGTH IN SECONDS        var sP_pixel; // THE SIZE/SHAPE OF THE PIXELS        var sP_FPS; // FRAMES PER SECOND                var sP_logoOption; // STRING NAME OF LOGO TO BE USED - EUROPE OR BUSINESS        var sP_logoAsset; // ASSET ITEM IN PROJECT PANE        var sP_logoScale;                var sP_alignmentVertical; // TOP OR BOTTOM        var sP_alignmentHorizontal; // LEFT OR RIGHT        // BOX SETTINGS        var sP_oscarWidth; // WIDTH OF THE GREENSCREEN BOX - 500 GRAPHIC        var sP_oscarHeight; // HEIGHT OF THE GREENSCREEN BOX - 500 GRAPHIC        var sP_logoHeight;        var sP_logoWidth;        var sP_yankee; // VALUE OF THE HEIGHT OF THE 'Y' ON THE LOGO                var sP_echo; // VALUE OF THE HEIGHT OF THE 'E' ON THE LOGO        var sP_whiskey; // HEIGHT OF Ts & Cs BOX        var sP_outerGuides; // YANKEE GUIDES - ON OR OFF        var sP_innerGuides; // ECHO GUIDES INSIDE BOX - ON OR OFF        var sP_logoGuides; // ECHO GUIDES AROUND LOGO - ON OR OFF                var sP_logoWidthXMargin;                var sP_oscar_yA; // POSSIBLE Y POSITION - REFER TO BOX MODEL        var sP_oscar_yB;        var sP_oscar_yC;        var sP_oscar_yD;                      var sP_oscar_xA; // POSSIBLE X POSITION - REFER TO BOX MODEL        var sP_oscar_xB;        var sP_oscar_xC;        var sP_oscar_xD;                var innerGuidesBox_yA;        var innerGuidesBox_yB;        var innerGuidesBox_yC;        var innerGuidesBox_yD;        var innerGuidesBox_xA;        var innerGuidesBox_xB;        var innerGuidesBox_xC;        var innerGuidesBox_xD;                var logoGuidesBox_yA;        var logoGuidesBox_yB;        var logoGuidesBox_yC;        var logoGuidesBox_yD;        var logoGuidesBox_xA;        var logoGuidesBox_xB;        var logoGuidesBox_xC;        var logoGuidesBox_xD;                var sP_logoPosition = new Array(); // BOTTOM LEFT POSITION ARRAY        var sP_oscar_UL = new Array();  // CORNER POSITION ARRAYS        var sP_oscar_UR = new Array();        var sP_oscar_LL = new Array();        var sP_oscar_LR = new Array();                var sP_whiskey_UL = new Array();        var sP_whiskey_UR = new Array();        var sP_whiskey_LL = new Array();        var sP_whiskey_LR = new Array();        var outerGuidesBoxA_UL = new Array();        var outerGuidesBoxA_UR = new Array();        var outerGuidesBoxA_LL = new Array();        var outerGuidesBoxA_LR = new Array();                var outerGuidesBoxB_UL = new Array();        var outerGuidesBoxB_UR = new Array();        var outerGuidesBoxB_LL = new Array();        var outerGuidesBoxB_LR = new Array();                var innerGuidesBox_UL = new Array();        var innerGuidesBox_UR = new Array();        var innerGuidesBox_LL = new Array();        var innerGuidesBox_LR = new Array();                var logoGuidesBox_UL = new Array();        var logoGuidesBox_UR = new Array();        var logoGuidesBox_LL = new Array();        var logoGuidesBox_LR = new Array();                // TEXT SETTINGS                var sP_textSize;        var sP_HSize;                var sP_HLineH;                var sP_HPSize;                var sP_HPLineH;                var sP_SHSize;                var sP_SHLineH;                var sP_H2BG;                var sP_PLSize;                // TEXT CONTENT                var sP_textLengthArray;        var sP_textLengthArrayDB;        var sP_textTagsArray = new Array;        var sP_textValuesArray = new Array;                 // ANIMATION SETTINGS        // MISC        var temp;        var tempObject;    // SECONDARY VARIABLES                        // ITEMS        var intermidiaryItem;                // OBJECTS        var logoLayer;        var oscarBox;        var whiskeyBox;        var outerGuidesBoxA;        var outerGuidesBoxB;        var innerGuidesBox;        var logoGuidesBox;        var oscarGraphic;                // COLOURS        var eJLight = [1,0.49019607843137,0];        var eJDark = [1,0.3529,0];        var greenScreen = [0,1,0];// IMPORTS PRESET NAMES (FROM DATABASE) INTO AN ARRAYfunction importPresetNames() {        // IMPORT PRESETS NAMES               presetsDataName.open('r'); // OPEN FILES            temp = presetsDataName.read() ;            var presetsDataContent = new XML (temp);                // GET ARRAY LENGTH            presetsNamesArrayLength = presetsDataContent.elements() .length();// GET ARRAY LENGTH                        //LOOP: GET NAMES + ADD TO  ARRAY            for (var i=1; i <= presetsNamesArrayLength; i++) {                temp = presetsDataContent.dataset[(i-1)].@name;                presetsNamesArray.push(temp);                }        presetsDataName.close(); // CLOSES FILES                 }// IMPORTS CORE DATASET NAMES (FROM DATABASE) INTO AN ARRAYfunction importCoreDatasetNames() {        // IMPORT PRESETS NAMES               coreDataName.open('r'); // OPEN FILES            temp = coreDataName.read() ;            var coreDataContent = new XML (temp);                // GET ARRAY LENGTH            coreNamesArrayLength = coreDataContent.elements() .length();// GET ARRAY LENGTH                        //LOOP: GET NAMES + ADD TO  ARRAY            for (var i=1; i <= coreNamesArrayLength; i++) {                temp = coreDataContent.dataset[(i-1)].@name;                coreNamesArray.push(temp);                }        coreDataName.close(); // CLOSES FILES                 }function errorControlA () {        coreDataName.remove();        versionDataName.remove();        presetsDataName.remove();    }function errorControlB () {        pluginItemFolder.remove();    }    function importPresetsNewProject() {                // IMPORTS PRESETS        presetsDataName.open('r'); // OPEN FILES                    temp = presetsDataName.read() ;            var presetsDataContent = new XML (temp);                          // IMPORTS DATA TO RAM                        // IMPORTS BOX PROPERTIES            sP_oscarWidth = presetsDataContent.dataset[selectedPreset].boxSettings.oscarWidth[0];            sP_oscarHeight = presetsDataContent.dataset[selectedPreset].boxSettings.oscarHeight[0];            sP_logoOption = presetsDataContent.dataset[selectedPreset].boxSettings.logoOption[0];            sP_logoScale = presetsDataContent.dataset[selectedPreset].boxSettings.logoScale[0];            sP_alignmentVertical = presetsDataContent.dataset[selectedPreset].boxSettings.alignmentVertical[0];            sP_alignmentHorizontal = presetsDataContent.dataset[selectedPreset].boxSettings.alignmentHorizontal[0];            sP_whiskey = presetsDataContent.dataset[selectedPreset].boxSettings.whiskey[0];            var sP_outerGuidesTemp = presetsDataContent.dataset[selectedPreset].boxSettings.outerGuides[0];            var sP_innerGuidesTemp = presetsDataContent.dataset[selectedPreset].boxSettings.innerGuides[0];            var sP_logoGuidesTemp = presetsDataContent.dataset[selectedPreset].boxSettings.logoGuides[0];                        // IMPORTS TEXT SETTINGS            sP_textSize = presetsDataContent.dataset[selectedPreset].textLayout.textSize[0];            sP_HSize = presetsDataContent.dataset[selectedPreset].textLayout.HSize[0];                   sP_HLineH = presetsDataContent.dataset[selectedPreset].textLayout.HLineH[0];                    sP_HPSize = presetsDataContent.dataset[selectedPreset].textLayout.HPSize[0];                   sP_HPLineH = presetsDataContent.dataset[selectedPreset].textLayout.HPLineH[0];                   sP_SHSize = presetsDataContent.dataset[selectedPreset].textLayout.SHSize[0];                  sP_SHLineH = presetsDataContent.dataset[selectedPreset].textLayout.SHLineH[0];                 sP_H2BG = presetsDataContent.dataset[selectedPreset].textLayout.H2BG[0];                  sP_PLSize = presetsDataContent.dataset[selectedPreset].textLayout.PLSize[0];                        // IMPORTS TEXT DATA            sP_textLengthArray = (presetsDataContent.dataset[selectedPreset].textContent[0].elements().length())/2;            for (var i = (sP_textLengthArray - 1) ; i >= 0; i--) {            sP_textValuesArray.push(presetsDataContent.dataset[selectedPreset].textContent[0].content[i]);            sP_textTagsArray.push(presetsDataContent.dataset[selectedPreset].textContent[0].kind[i]);            }                                                                               presetsDataName.close(); // CLOSES FILES         // CONVERTS NUMERICAL STRINGS TO FLOAT        sP_oscarWidth = parseFloat(sP_oscarWidth);        sP_oscarHeight = parseFloat(sP_oscarHeight);        sP_logoScale = parseFloat(sP_logoScale);        sP_whiskey = parseFloat(sP_whiskey);                sP_textSize = parseFloat(sP_textSize);        sP_HSize = parseFloat(sP_HSize);        sP_HLineH = parseFloat(sP_HLineH);                sP_HPSize = parseFloat(sP_HPSize);                sP_HPLineH = parseFloat(sP_HPLineH);                sP_SHSize = parseFloat(sP_SHSize);                sP_SHLineH = parseFloat(sP_SHLineH);        sP_H2BG = parseFloat(sP_H2BG);                sP_PLSize = parseFloat(sP_PLSize);                        // CONVERTS BOOLEAN STRINGS TO BOOLEAN                if (sP_outerGuidesTemp == "true") {                    sP_outerGuides = true;                } else if (sP_outerGuidesTemp == "false") {                      sP_outerGuides = false;                } else {                    alert("XML Boolean Failure");                };                if (sP_innerGuidesTemp == "true") {                    sP_innerGuides = true;                } else if (sP_innerGuidesTemp == "false") {                      sP_innerGuides = false;                } else {                    alert("XML Boolean Failure");                };                if (sP_logoGuidesTemp == "true") {                    sP_logoGuides = true;                } else if (sP_logoGuidesTemp == "false") {                      sP_logoGuides = false;                } else {                    alert("XML Boolean Failure");                };                        updateCoreDatabase();        updateCoreDatabaseTextData();        buildPrimary ();         }function updateCoreDatabase() {           // READS CORE DATA        coreDataName.open('r');            temp = coreDataName.read();            var coreDataContent = new XML (temp);                          // EDITS STORED VERSION                            // ADD NEW DATA            coreDataContent.dataset[coreDatabaseActiveIndex].@uniqueIdentifier = sP_ID;            coreDataContent.dataset[coreDatabaseActiveIndex].@name= sP_name;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.subProjectName[0] = sP_name;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.projectNumber[0] = sP_projectNumber;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.creativeTitle[0] = sP_creativeTitle;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.location[0] = sP_location;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.compWidth[0] = sP_compWidth;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.compHeight[0] = sP_compHeight;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.compLength[0] = sP_compLength;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.compPixel[0] = sP_pixel;            coreDataContent.dataset[coreDatabaseActiveIndex].compSettings.compFPS[0] = sP_FPS;                     coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.oscarWidth[0] = sP_oscarWidth;            coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.oscarHeight[0] = sP_oscarHeight;              coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.logoOption[0] = sP_logoOption;                coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.logoScale[0] = sP_logoScale;                coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.alignmentVertical[0] = sP_alignmentVertical;              coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.alignmentHorizontal[0] = sP_alignmentHorizontal;                          coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.whiskey[0] = sP_whiskey;              coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.outerGuides[0] = sP_outerGuides;              coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.innerGuides[0] = sP_innerGuides;            coreDataContent.dataset[coreDatabaseActiveIndex].boxSettings.logoGuides[0] = sP_logoGuides;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.textSize[0] = sP_textSize;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.HSize[0] = sP_HSize;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.HLineH[0] = sP_HLineH;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.HPSize[0] = sP_HPSize;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.HPLineH[0] = sP_HPLineH;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.SHSize[0] = sP_SHSize;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.SHLineH[0] = sP_SHLineH;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.H2BG[0] = sP_H2BG;              coreDataContent.dataset[coreDatabaseActiveIndex].textLayout.PLSize[0] = sP_PLSize;           coreDataName.close(); // CLOSES FILES                   // SAVES DATA TO CORE DATABASE        coreDataName.open('w'); // OPEN FILES            coreDataName.write(coreDataContent);        coreDataName.close(); // CLOSES FILES     }    function updateCoreDatabaseTextData() {         coreDataName.open('r');            temp = coreDataName.read();            var coreDataContent = new XML (temp);                sP_textLengthArrayCDB = (coreDataContent.dataset[selectedPreset].textContent[0].elements().length())/2;                for (var i = (sP_textLengthArrayCDB) ; i > 0; i--) {                                       delete coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].content[i];                   delete coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i];                }                sP_textLengthArrayCDB= 0;                sP_textValuesArray.reverse();                sP_textTagsArray.reverse();                for (var i=0; i < (sP_textLengthArray) ; i++) {                coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].content[i] = sP_textValuesArray[i];                coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = sP_textTagsArray[i];                }                sP_textLengthArrayCDB = sP_textLengthArray;                sP_textValuesArray.reverse();                sP_textTagsArray.reverse();        coreDataName.close(); // CLOSES FILES                   // SAVES DATA TO CORE DATABASE        coreDataName.open('w'); // OPEN FILES            coreDataName.write(coreDataContent);        coreDataName.close(); // CLOSES FILES }  function updateCoreDatabaseModifyTags() { coreDataName.open('r');            temp = coreDataName.read();            var coreDataContent = new XML (temp);                sP_textLengthArrayCDB = (coreDataContent.dataset[selectedPreset].textContent[0].elements().length())/2;                for (var i = 0 ; i <= (sP_textLengthArrayCDB -1); i++) {                     coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i];                                          if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "Heading") {                       coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = "H";                                              } else if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "Heading Paragraph") {                         coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = "HP";                                          } else if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "Sub Heading") {                         coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = "SH";                                          } else if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "Destination") {                         coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = "DS";                                          } else if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "Details") {                         coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = "DT";                                          } else if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "Price Lock Up") {                         coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = "PL";                                          } else if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "Terms") {                         coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] = "T";                                          } else if (coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i] ==  "H" || "HP" || "SH" || "DS" || "DT" || "PL" || "T"){                                              } else {                         alert("Error: Tags Don't Match Expected Catagories")                                              };                       sP_textTagsArray[i] = coreDataContent.dataset[coreDatabaseActiveIndex].textContent[0].kind[i];                }        alert(coreDataContent);        coreDataName.close(); // CLOSES FILES                   // SAVES DATA TO CORE DATABASE        coreDataName.open('w'); // OPEN FILES            coreDataName.write(coreDataContent);        coreDataName.close(); // CLOSES FILES   }// BUILDS PROJECT FILESfunction buildPrimary () {        // CREATES PLUGIN FOLDER (ITEM)        activeSubPoject = app.project.activeItem;        var pluginItemFolder = app.project.items.addFolder("*Plugin Files")        //TESTS THAT THE NEW FOLDER IS THE TOP ITEM IN THE PROJECT PANE        if (app.project.item(1).name == "*Plugin Files") {                // BUILDS FOLDER (ITEM) SYTEM AND ASSIGNS IDs                projectItemFolder = app.project.items.addFolder(scriptName + " - Plugin Files");                projectItemFolder.parentFolder = pluginItemFolder;                     projectItemFolder.comment = (scriptName + " Version " + scriptVersionNumber);                // IMPORT ASSETS                projectItemAssetFolder = app.project.importFile(new ImportOptions (File (scriptDirectory + "easyjet_003/core_assets/assets.aep")));                projectItemAssetFolder.name = "Plugin Assets";                           projectItemAssetFolder.parentFolder = projectItemFolder;                                // SUBFOLDER BUILD FUNCTION                buildSecondary ();                                            }else{                               // DISPLAYS ERROR / REMOVES DATABASES & FOLDER(ITEM)                alert('Error - "*EasyJet Plugin Files" should always be the top item in your project pane. \r Please rectify this and run script from start.');                errorControlA ();                errorControlB ();                                        };    }// BUILDS SUB-PROJECT FILESfunction buildSecondary () {            // ARCHITECTURAL VALUES            // CREATES SUBFOLDER AND SETS ID    projectItemSubFolder =  app.project.items.addFolder(sP_name);    projectItemSubFolder.parentFolder = projectItemFolder;    projectItemSubFolder.comment = sP_ID;        // CREATES NEW COMPOSITIONS    var newCompArt = app.project.items.addComp("Artwork-" + sP_name, sP_compWidth, sP_compHeight, sP_pixel, sP_compLength, sP_FPS);    var newCompInter = app.project.items.addComp("Intermidiary-" + sP_name, sP_compWidth, sP_compHeight, sP_pixel, sP_compLength, sP_FPS);    var newCompOutput = app.project.items.addComp("Output-" + sP_name, sP_compWidth, sP_compHeight, sP_pixel, sP_compLength, sP_FPS);    // PUTS COMPS IN FOLDER    newCompArt.parentFolder = app.project.item(1).item((pluginArrayPosition) +1).item((activeSubProjectItem)+1);    newCompInter .parentFolder = app.project.item(1).item((pluginArrayPosition) +1).item((activeSubProjectItem)+1);    newCompOutput.parentFolder = app.project.item(1).item((pluginArrayPosition) +1).item((activeSubProjectItem)+1);    //IDENTIFIY COMPS    artworkItem = app.project.item(1).item((pluginArrayPosition) +1).item((activeSubProjectItem)+1).item(1);    intermidiaryItem = app.project.item(1).item((pluginArrayPosition) +1).item((activeSubProjectItem)+1).item(2);    outputItem = app.project.item(1).item((pluginArrayPosition) +1).item((activeSubProjectItem)+1).item(3);    // SETS COMPS ID     artworkItem.comment = sP_ID;    intermidiaryItem.comment = sP_ID;    outputItem.comment = sP_ID;        // MAKES PROXY FOR 500 GRAPHIC            oscarGraphic = intermidiaryItem.layers.addSolid(eJLight, "500 Graphic Proxy", sP_compWidth, sP_compHeight, sP_pixel, sP_compLength);          // MAKES LAYER COLLECTIONS FROM COMPS                   // PUTS ACTIVE COMP IN ARTWORK        var originalCollection = artworkItem.layers.add(activeSubPoject);                 // PUTS ARTWORK IN INTERMIDIARY        var artworkCollection = intermidiaryItem.layers.add(artworkItem);                       // PUTS INTERMIDIARY IN OUTPUT        var intermidiaryCollection = outputItem.layers.add(intermidiaryItem);            // GREENSCREEN         intermidiaryItem.layer(1) ("Effects").addProperty("Keylight (1.2)");                intermidiaryItem.layer(1) ("Effects").property("Keylight (1.2)").property("Screen Colour").setValue([0,1,0]);                intermidiaryItem.layer(1) ("Effects").property("Keylight (1.2)").property("Despill Bias").setValue([0.90980392,0.65882353,0.60784314]);                intermidiaryItem.layer(1) ("Effects").property("Keylight (1.2)").property("Alpha Bias").setValue([0.90980392,0.65882353,0.60784314]);                intermidiaryItem.layer(1) ("Effects").property("Keylight (1.2)").property("Clip White").setValue(30);              intermidiaryItem.layer(1) ("Effects").property("Keylight (1.2)").property("Clip Rollback").setValue(1.5);              intermidiaryItem.layer(1) ("Effects").property("Keylight (1.2)").property("Replace Method").setValue(2);                  // CREATES LAYERS & EFFECTS OBJECTS                // CREATES 500 GRAPHIC - GREEN SCREEN BOX        artworkItem.layers.addSolid(greenScreen, "oscarBox", sP_compWidth, sP_compHeight, sP_pixel, sP_compLength);        oscarBox = artworkItem.layer("oscarBox");                      oscarBox ("Effects").addProperty("Corner Pin");       // CREATES WHITE BOX        intermidiaryItem.layers.addSolid([1,1,1], "whiskeyBox", sP_compWidth, sP_compHeight, sP_pixel, sP_compLength);        whiskeyBox = intermidiaryItem.layer("whiskeyBox");                      whiskeyBox ("Effects").addProperty("Corner Pin");       // OUTER GUIDES BOX A        intermidiaryItem.layers.addSolid([1,0.74901961,0], "outerGuidesBoxA", sP_compWidth, sP_compHeight, sP_pixel, sP_compLength);        outerGuidesBoxA = intermidiaryItem.layer("outerGuidesBoxA");                      outerGuidesBoxA ("Effects").addProperty("Corner Pin");       // OUTER GUIDES BOX B        intermidiaryItem.layers.addSolid([1,0.74901961,0], "outerGuidesBoxB", sP_compWidth, sP_compHeight, sP_pixel, sP_compLength);        outerGuidesBoxB = intermidiaryItem.layer("outerGuidesBoxB");                      outerGuidesBoxB ("Effects").addProperty("Corner Pin");       // INNER GUIDES BOX        intermidiaryItem.layers.addSolid([1,0,0.76862745], "innerGuidesBox", sP_compWidth, sP_compHeight, sP_pixel, sP_compLength);        innerGuidesBox = intermidiaryItem.layer("innerGuidesBox");                      innerGuidesBox ("Effects").addProperty("Corner Pin");       // LOGO GUIDES BOX        intermidiaryItem.layers.addSolid([1,0,0.76862745], "logoGuidesBox", sP_compWidth, sP_compHeight, sP_pixel, sP_compLength);        logoGuidesBox = intermidiaryItem.layer("logoGuidesBox");                      logoGuidesBox ("Effects").addProperty("Corner Pin");        // PLACES RELIVANT LOGO INTO INTERMIDIARY COMP        if (sP_logoOption == "business") {                   sP_logoAsset = projectItemAssetFolder.item(2);        }else{                        sP_logoAsset =projectItemAssetFolder.item(3);        };        logoLayer = intermidiaryItem.layers.add(sP_logoAsset);         logoLayer.name = "logo";         logoLayer = intermidiaryItem.layer("logo");                // TEMPORARILY LOCKED LAYERS - LOCK        oscarGraphic.locked = true;                oscarBox.locked = true;           whiskeyBox.locked = true;         outerGuidesBoxA.locked = true;         outerGuidesBoxB.locked = true;         innerGuidesBox.locked = true;         logoGuidesBox.locked = true;         logoLayer.locked = true;         // PERMANENTLY LOCKED LAYER COLLECTIONS - LOCK        originalCollection.locked = true;         artworkCollection.locked = true;         intermidiaryCollection.locked = true;     //SETS VALUES    modifySubProject ();    }function boxModel () {    // CALCULATE LOGO VALUES        sP_logoHeight = (sP_logoScale * 10) ; // THE LOGO ASSET IS 1000PX TALL        sP_logoWidth = ((sP_logoScale * 10) * 3.5) ;        sP_yankee = ((sP_logoHeight / 100) * 55.5); // THE 'Y' IS 55.5% OF THE HEIGHT OF THE LOGO ALTOGETHER        sP_echo = ((sP_logoHeight / 100) * 42.4); // THE 'E' IS 42.4% OF THE HEIGHT OF THE LOGO ALTOGETHER                if (sP_logoOption == "business") {                   sP_logoWidthXMargin = (sP_logoWidth * (3308/3500));         }else{                        sP_logoWidthXMargin = (sP_logoWidth * (3118/3500));        };                                            // CALCULATES OSCAR BOX 1D POSITIONS            sP_oscar_yA = (sP_compHeight - sP_yankee - sP_whiskey);        sP_oscar_yB = (sP_compHeight - sP_yankee - sP_whiskey - sP_oscarHeight);        sP_oscar_yC = (sP_yankee + sP_oscarHeight);        sP_oscar_yD = (sP_yankee);                sP_oscar_xA = (sP_yankee);        sP_oscar_xB = (sP_yankee + sP_oscarWidth);        sP_oscar_xC = (sP_compWidth - sP_yankee - sP_oscarWidth);        sP_oscar_xD = (sP_compWidth - sP_yankee);                innerGuidesBox_yA = (sP_oscar_yA - sP_echo);        innerGuidesBox_yB = (sP_oscar_yB  + sP_echo);        innerGuidesBox_yC = (sP_oscar_yC - sP_echo);        innerGuidesBox_yD = (sP_oscar_yD + sP_echo);        innerGuidesBox_xA = (sP_oscar_xA + sP_echo);        innerGuidesBox_xB = (sP_oscar_xB - sP_echo);        innerGuidesBox_xC = (sP_oscar_xC + sP_echo);        innerGuidesBox_xD = (sP_oscar_xD - sP_echo);                logoGuidesBox_yA = sP_oscar_yA;        logoGuidesBox_yB = (sP_oscar_yA - (sP_echo * 2) - sP_logoHeight);        logoGuidesBox_yC = sP_oscar_yC;        logoGuidesBox_yD = (sP_oscar_yC - (sP_echo * 2) - sP_logoHeight);        logoGuidesBox_xA = (sP_oscar_xB - (sP_echo * 2) - sP_logoWidthXMargin);        logoGuidesBox_xB = sP_oscar_xB;        logoGuidesBox_xC = (sP_oscar_xD - (sP_echo * 2) - sP_logoWidthXMargin);        logoGuidesBox_xD = sP_oscar_xD;    // CALCULATES WHISKEY POSITIONS            sP_whiskey_UL = [0 , (sP_compHeight - sP_whiskey) ];        sP_whiskey_UR = [sP_compWidth , (sP_compHeight - sP_whiskey) ];        sP_whiskey_LL = [0 , sP_compHeight];        sP_whiskey_LR = [sP_compWidth , sP_compHeight];        // CALCULATES OSCAR 2D POSITIONS    if (sP_alignmentVertical == "top" && sP_alignmentHorizontal == "left" ) {                sP_oscar_UL = [sP_oscar_xA,sP_oscar_yD];        sP_oscar_UR = [sP_oscar_xB,sP_oscar_yD];        sP_oscar_LL = [sP_oscar_xA,sP_oscar_yC];        sP_oscar_LR = [sP_oscar_xB,sP_oscar_yC];                sP_logoPosition = [(sP_oscar_xB - sP_echo),(sP_oscar_yC - sP_echo)];                outerGuidesBoxA_UL = [0 , (sP_compHeight - sP_whiskey - sP_yankee) ];        outerGuidesBoxA_UR = [sP_compWidth , (sP_compHeight - sP_whiskey - sP_yankee) ];        outerGuidesBoxA_LL = sP_whiskey_UL        outerGuidesBoxA_LR = sP_whiskey_UR                outerGuidesBoxB_UL = [(sP_compWidth - sP_yankee) , 0];        outerGuidesBoxB_UR = [sP_compWidth , 0];        outerGuidesBoxB_LL = [(sP_compWidth - sP_yankee) , (sP_compHeight - sP_whiskey - sP_yankee)];        outerGuidesBoxB_LR = [sP_compWidth , (sP_compHeight - sP_whiskey - sP_yankee)];                innerGuidesBox_UL = [innerGuidesBox_xA , innerGuidesBox_yD];        innerGuidesBox_UR = [innerGuidesBox_xB , innerGuidesBox_yD];        innerGuidesBox_LL = [innerGuidesBox_xA , innerGuidesBox_yC];        innerGuidesBox_LR = [innerGuidesBox_xB , innerGuidesBox_yC];                logoGuidesBox_UL = [logoGuidesBox_xA , logoGuidesBox_yD];        logoGuidesBox_UR = [logoGuidesBox_xB , logoGuidesBox_yD];        logoGuidesBox_LL = [logoGuidesBox_xA , logoGuidesBox_yC];        logoGuidesBox_LR = [logoGuidesBox_xB , logoGuidesBox_yC];            } else if (sP_alignmentVertical == "top" && sP_alignmentHorizontal == "right" ) {                sP_oscar_UL = [sP_oscar_xC,sP_oscar_yD];        sP_oscar_UR = [sP_oscar_xD,sP_oscar_yD];        sP_oscar_LL = [sP_oscar_xC,sP_oscar_yC];        sP_oscar_LR = [sP_oscar_xD,sP_oscar_yC];                sP_logoPosition = [(sP_oscar_xD - sP_echo),(sP_oscar_yC - sP_echo)];                outerGuidesBoxA_UL = [0 , (sP_compHeight - sP_whiskey - sP_yankee) ];        outerGuidesBoxA_UR = [sP_compWidth , (sP_compHeight - sP_whiskey - sP_yankee) ];        outerGuidesBoxA_LL = sP_whiskey_UL        outerGuidesBoxA_LR = sP_whiskey_UR                outerGuidesBoxB_UL = [0,0];        outerGuidesBoxB_UR = [sP_yankee,0];        outerGuidesBoxB_LL = [0,(sP_compHeight - sP_whiskey - sP_yankee)];        outerGuidesBoxB_LR = [sP_yankee,(sP_compHeight - sP_whiskey - sP_yankee)];                innerGuidesBox_UL = [innerGuidesBox_xC , innerGuidesBox_yD];        innerGuidesBox_UR = [innerGuidesBox_xD , innerGuidesBox_yD];        innerGuidesBox_LL = [innerGuidesBox_xC , innerGuidesBox_yC];        innerGuidesBox_LR = [innerGuidesBox_xD , innerGuidesBox_yC];                        logoGuidesBox_UL = [logoGuidesBox_xC , logoGuidesBox_yD];        logoGuidesBox_UR = [logoGuidesBox_xD , logoGuidesBox_yD];        logoGuidesBox_LL = [logoGuidesBox_xC , logoGuidesBox_yC];        logoGuidesBox_LR = [logoGuidesBox_xD , logoGuidesBox_yC];       } else if (sP_alignmentVertical == "bottom" && sP_alignmentHorizontal == "left" ) {                sP_oscar_UL = [sP_oscar_xA,sP_oscar_yB];        sP_oscar_UR = [sP_oscar_xB,sP_oscar_yB];        sP_oscar_LL = [sP_oscar_xA,sP_oscar_yA];        sP_oscar_LR = [sP_oscar_xB,sP_oscar_yA];                sP_logoPosition = [(sP_oscar_xB - sP_echo),(sP_oscar_yA - sP_echo)];                outerGuidesBoxA_UL = [0,0];        outerGuidesBoxA_UR = [sP_compWidth,0];        outerGuidesBoxA_LL = [0,sP_yankee];        outerGuidesBoxA_LR = [sP_compWidth,sP_yankee];                outerGuidesBoxB_UL = [(sP_compWidth - sP_yankee) , sP_yankee];        outerGuidesBoxB_UR = [sP_compWidth , sP_yankee];        outerGuidesBoxB_LL = [(sP_compWidth - sP_yankee) , (sP_compHeight - sP_whiskey)];        outerGuidesBoxB_LR = [sP_compWidth , (sP_compHeight - sP_whiskey)];                innerGuidesBox_UL = [innerGuidesBox_xA , innerGuidesBox_yB];        innerGuidesBox_UR = [innerGuidesBox_xB , innerGuidesBox_yB];        innerGuidesBox_LL = [innerGuidesBox_xA , innerGuidesBox_yA];        innerGuidesBox_LR = [innerGuidesBox_xB , innerGuidesBox_yA];                 logoGuidesBox_UL = [logoGuidesBox_xA , logoGuidesBox_yB];        logoGuidesBox_UR = [logoGuidesBox_xB , logoGuidesBox_yB];        logoGuidesBox_LL = [logoGuidesBox_xA , logoGuidesBox_yA];        logoGuidesBox_LR = [logoGuidesBox_xB , logoGuidesBox_yA];                  } else if (sP_alignmentVertical == "bottom" && sP_alignmentHorizontal == "right" ) {                sP_oscar_UL = [sP_oscar_xC,sP_oscar_yB];        sP_oscar_UR = [sP_oscar_xD,sP_oscar_yB];        sP_oscar_LL = [sP_oscar_xC,sP_oscar_yA];        sP_oscar_LR = [sP_oscar_xD,sP_oscar_yA];                 sP_logoPosition = [(sP_oscar_xD - sP_echo),(sP_oscar_yA - sP_echo)];                outerGuidesBoxA_UL = [0,0];        outerGuidesBoxA_UR = [sP_compWidth,0];        outerGuidesBoxA_LL = [0,sP_yankee];        outerGuidesBoxA_LR = [sP_compWidth,sP_yankee];                outerGuidesBoxB_UL = [0,sP_yankee];        outerGuidesBoxB_UR = [sP_yankee,sP_yankee];        outerGuidesBoxB_LL = [0,(sP_compHeight - sP_whiskey)];        outerGuidesBoxB_LR = [sP_yankee,(sP_compHeight - sP_whiskey)];                innerGuidesBox_UL = [innerGuidesBox_xC , innerGuidesBox_yB];        innerGuidesBox_UR = [innerGuidesBox_xD , innerGuidesBox_yB];        innerGuidesBox_LL = [innerGuidesBox_xC , innerGuidesBox_yA];        innerGuidesBox_LR = [innerGuidesBox_xD , innerGuidesBox_yA];                logoGuidesBox_UL = [logoGuidesBox_xC , logoGuidesBox_yB];        logoGuidesBox_UR = [logoGuidesBox_xD , logoGuidesBox_yB];        logoGuidesBox_LL = [logoGuidesBox_xC , logoGuidesBox_yA];        logoGuidesBox_LR = [logoGuidesBox_xD , logoGuidesBox_yA];                    } else {            alert("Alignment is not set");        };          }function modifySubProject () {        // TEMPORARILY LOCKED LAYERS - UN-LOCK        oscarGraphic.locked = false;                oscarBox.locked = false;           whiskeyBox.locked = false;         outerGuidesBoxA.locked = false;         outerGuidesBoxB.locked = false;         innerGuidesBox.locked = false;         logoGuidesBox.locked = false;          logoLayer.locked = false;       //SETS PRIMARY VALUES           //LOGO        logoLayer = intermidiaryItem.layer("logo");        logoLayer.scale.setValue([sP_logoScale,sP_logoScale]);          logoLayer.anchorPoint.setValue([3500,1000]);                    // CALCULATES SECONDARY VALUES    boxModel ();    // SETS SECONDARY VALUES            // LOGO        logoLayer.position.setValue(sP_logoPosition);                 // OSCAR BOX        oscarBox ("Effects").property("Corner Pin").property("Upper Left").setValue(sP_oscar_UL);        oscarBox ("Effects").property("Corner Pin").property("Upper Right").setValue(sP_oscar_UR);        oscarBox ("Effects").property("Corner Pin").property("Lower Left").setValue(sP_oscar_LL);        oscarBox ("Effects").property("Corner Pin").property("Lower Right").setValue(sP_oscar_LR);         // WHISKEY BOX        whiskeyBox ("Effects").property("Corner Pin").property("Upper Left").setValue(sP_whiskey_UL);        whiskeyBox ("Effects").property("Corner Pin").property("Upper Right").setValue(sP_whiskey_UR);        whiskeyBox ("Effects").property("Corner Pin").property("Lower Left").setValue(sP_whiskey_LL);        whiskeyBox ("Effects").property("Corner Pin").property("Lower Right").setValue(sP_whiskey_LR);         // OUTER GUIDES BOX A        outerGuidesBoxA.opacity.setValue(35);        outerGuidesBoxA ("Effects").property("Corner Pin").property("Upper Left").setValue(outerGuidesBoxA_UL);        outerGuidesBoxA ("Effects").property("Corner Pin").property("Upper Right").setValue(outerGuidesBoxA_UR);        outerGuidesBoxA ("Effects").property("Corner Pin").property("Lower Left").setValue(outerGuidesBoxA_LL);        outerGuidesBoxA ("Effects").property("Corner Pin").property("Lower Right").setValue(outerGuidesBoxA_LR);                // OUTER GUIDES BOX B        outerGuidesBoxB.opacity.setValue(35);        outerGuidesBoxB ("Effects").property("Corner Pin").property("Upper Left").setValue(outerGuidesBoxB_UL);        outerGuidesBoxB ("Effects").property("Corner Pin").property("Upper Right").setValue(outerGuidesBoxB_UR);        outerGuidesBoxB ("Effects").property("Corner Pin").property("Lower Left").setValue(outerGuidesBoxB_LL);        outerGuidesBoxB ("Effects").property("Corner Pin").property("Lower Right").setValue(outerGuidesBoxB_LR);                 // INNER GUIDES BOX        innerGuidesBox.opacity.setValue(35);        innerGuidesBox ("Effects").property("Corner Pin").property("Upper Left").setValue(innerGuidesBox_UL);        innerGuidesBox ("Effects").property("Corner Pin").property("Upper Right").setValue(innerGuidesBox_UR);        innerGuidesBox ("Effects").property("Corner Pin").property("Lower Left").setValue(innerGuidesBox_LL);        innerGuidesBox ("Effects").property("Corner Pin").property("Lower Right").setValue(innerGuidesBox_LR);                 // LOGO GUIDES BOX        logoGuidesBox.opacity.setValue(35);        logoGuidesBox ("Effects").property("Corner Pin").property("Upper Left").setValue(logoGuidesBox_UL);        logoGuidesBox ("Effects").property("Corner Pin").property("Upper Right").setValue(logoGuidesBox_UR);        logoGuidesBox ("Effects").property("Corner Pin").property("Lower Left").setValue(logoGuidesBox_LL);        logoGuidesBox ("Effects").property("Corner Pin").property("Lower Right").setValue(logoGuidesBox_LR);         // TEMPORARILY LOCKED LAYERS - LOCK        oscarGraphic.locked = true;                oscarBox.locked = true;           whiskeyBox.locked = true;         outerGuidesBoxA.locked = true;         outerGuidesBoxB.locked = true;         innerGuidesBox.locked = true;         logoGuidesBox.locked = true;         logoLayer.locked = true;                 if (newProject == true && updateProject == false) {                scriptControl();                            } else if (newProject == false && updateProject == false) {                    } else if (updateProject == true) {                alert("End");                        } else {        alert("Update Project is not set");        };    }function scriptControl () {newProject = false;// FUNCTIONS            var newValue;             function sliderChange(slider) {                newValue = Math.floor(slider.value);                }            function editTextChanging(edit) {                if (isNaN(edit.text)) {                    alert("Bitch! Does that look like a number?")                }                else {                    newValue = Math.floor(edit.text)                }            }            function newImage() {                    var userGuidePlaceholder = userGuide.add ("image", undefined, File (imageFolder + userGuideArray[userGuidePage]));                }            // INTERFACE            var scriptControl = new Window ("palette", "easyJet Script");            scriptControl.graphics.backgroundColor = scriptControl.graphics.newBrush (scriptControl.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR            scriptControl.margins = [20,20,20,20]; // BOX MARGINS            // HEADER            var imageFolder = "/Applications/Adobe After Effects CS5/Scripts/ScriptUI Panels/easyjet_003/";                var header = scriptControl.add ("image", undefined, File (imageFolder + "header.jpg"));                var scriptControlNew = scriptControl.add("group");                    var scriptControlNewButton = scriptControlNew.add ("button", [0,0,440,20], "New");                 var scriptControlSave = scriptControl.add("group");                    var scriptControlSaveDropDown = scriptControlSave.add ("edittext", [0,0,330,20], "Name your Preset");                        scriptControlSaveDropDown.selection = 0;                    var scriptControlSaveButton = scriptControlSave.add ("button", [0,0,100,20], "Save");                var scriptControlLoad = scriptControl.add("group");                    importCoreDatasetNames(); // IMPORTS SUBPROJECT NAMES FOR SWITCH SELECTOR                    var scriptControlLoadDropDown = scriptControlLoad.add ("dropdownlist", [0,0,330,20], coreNamesArray);                    scriptControlLoadDropDown.selection = 0;                    var scriptControlLoadButton = scriptControlLoad.add ("button", [0,0,100,20], "Switch")                                // TABBED PANEL                var tabs = scriptControl.add("tabbedpanel");                tabs.preferredSize = [440,650];                        // USER GUIDE                        var userGuide = tabs.add ("tab",undefined,"User Guide");                            var userGuideContentGroup = userGuide.add("group");                            var userGuideArray = ["user_guide_placeholder_01","user_guide_placeholder_02","user_guide_placeholder_03","user_guide_placeholder_04","user_guide_placeholder_05","user_guide_placeholder_06","user_guide_placeholder_07"];                            var userGuidePage = 0;                            var userGuidePlaceholderA= userGuideContentGroup.add ("image", undefined, File (imageFolder + userGuideArray[userGuidePage] + ".jpg"));                            var userGuideButtonGroup = userGuide.add("group");                            userGuideButtonGroup.orientation ="row";                            var backButton = userGuideButtonGroup.add("button", [0,0,200,22], "BACK");                            var nextButton = userGuideButtonGroup.add("button", [0,0,200,20], "NEXT");                                         nextButton.onClick = function(){                                if (userGuidePage == (userGuideArray.length - 1)){                                   userGuidePage = 0                                   userGuidePlaceholderA.image = ("image", undefined, File (imageFolder + userGuideArray[userGuidePage] + ".jpg"));                                   } else {                                   userGuidePage++;                                   userGuidePlaceholderA.image = ("image", undefined, File (imageFolder + userGuideArray[userGuidePage] + ".jpg"));                                       }                               };                                                       backButton.onClick = function(){                                if (userGuidePage == 0){                                   userGuidePage = userGuideArray.length - 1                                   userGuidePlaceholderA.image = ("image", undefined, File (imageFolder + userGuideArray[userGuidePage] + ".jpg"));                                   } else {                                    userGuidePage--;                                    userGuidePlaceholderA.image = ("image", undefined, File (imageFolder + userGuideArray[userGuidePage] + ".jpg"));                                   }                               };                                                       // USER GUIDE - STYLE                           userGuide.alignChildren = ["fill","fill"];                            userGuide.graphics.backgroundColor = scriptControl.graphics.newBrush (scriptControl.graphics.BrushType.SOLID_COLOR, eJLight); // TAB BACK COLOUR                                       nextButton.graphics.foregroundColor = scriptControl.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                             backButton.graphics.foregroundColor = scriptControl.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                    // BOX PROPERTIES                        var boxProperties = tabs.add ("tab",undefined,"Box Properties");                                                boxProperties.alignChildren = "fill";                        boxProperties.graphics.backgroundColor = scriptControl.graphics.newBrush (scriptControl.graphics.BrushType.SOLID_COLOR, [1,1,1]); // TAB BACK COLOUR                        boxProperties.margins = [10,10,10,10];                                                                        tabs.selection = boxProperties; // OPENS THIS TAB AT STARTUP                            var orangeBox = boxProperties.add ("panel", undefined, "500 Graphic");                                   var orangeBoxXLine = orangeBox.add ("group");                                        var orangeBoxXStaticText = orangeBoxXLine.add ("statictext", undefined, "Width");                                        var orangeBoxXEditText =  orangeBoxXLine.add ("edittext", [0,0,50,18], sP_oscarWidth);                                    var orangeBoxXSliderGroup = orangeBox.add ("group");                                    var orangeBoxXSlider = orangeBoxXSliderGroup.add ("slider", [0,0,380,22], sP_oscarWidth, 100, 1920);                                                                // SlLIDER INTERACTION                                    orangeBoxXSlider.onChanging = function(){                                        sliderChange(orangeBoxXSlider);                                        orangeBoxXEditText.text = newValue;                                        sP_oscarWidth = Math.floor (orangeBoxXSlider.value) ;                                        modifySubProject();                                    };                                       orangeBoxXSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    orangeBoxXEditText.onChange = function (){                                                               editTextChanging(orangeBoxXEditText);                                        orangeBoxXSlider.value = newValue;                                        sP_oscarWidth = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                    var oscarX = orangeBoxXSlider.value;                                    var orangeBoxYLine = orangeBox.add ("group");                                        var orangeBoxYStaticText = orangeBoxYLine.add ("statictext", undefined, "Height");                                        var orangeBoxYEditText =  orangeBoxYLine.add ("edittext", [0,0,50,18], sP_oscarHeight);                                    var orangeBoxYSliderGroup = orangeBox.add ("group");                                    var orangeBoxYSlider = orangeBoxYSliderGroup.add ("slider", [0,0,380,22], sP_oscarHeight, 100, 1920);                                                                // SlLIDER INTERACTION                                    orangeBoxYSlider.onChanging = function(){                                        sliderChange(orangeBoxYSlider);                                        orangeBoxYEditText.text = newValue;                                        sP_oscarHeight = Math.floor (orangeBoxYSlider.value) ;                                        modifySubProject();                                    };                                                                        orangeBoxYSlider.onChange = function(){                                        updateCoreDatabase();                                                                    };                                                                        orangeBoxYEditText.onChange = function (){                                                               editTextChanging(orangeBoxYEditText);                                        orangeBoxYSlider.value = newValue;                                        sP_oscarHeight = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                             // ORANGE BOX - STYLE                             orangeBox.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                            orangeBox.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                    orangeBox.alignChildren = "left";                                orangeBoxXLine.margins = [0,10,0,0];                                orangeBoxXStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                orangeBoxXStaticText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                orangeBoxXEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                orangeBoxXEditText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                orangeBoxYLine.margins = [0,10,0,0];                                orangeBoxYStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                orangeBoxYStaticText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                orangeBoxYEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                orangeBoxYEditText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                               // ALIGNMENT CONTROLS                                var alignmentControls = boxProperties.add ("panel", undefined, "Alignment");                                var dir = imageFolder + "align/"; // SETS DIRECTORY                                var iconsTL = {d:File(dir+"TL_R.png"), r:File(dir+"TL_D.png")} // CALLS ROLLOVER STATES                                var iconsTR = {d:File(dir+"TR_R.png"), r:File(dir+"TR_D.png")}                                var iconsBL = {d:File(dir+"BL_R.png"), r:File(dir+"BL_D.png")}                                var iconsBR = {d:File(dir+"BR_R.png"), r:File(dir+"BR_D.png")}                                    var alignmentBoxGroup = alignmentControls.add ("group");                                    alignmentControls.margins = [00,20,0,0];                                    alignmentControls.orientation = "row";                                    alignmentControls.alignChildren = "left";                                    alignmentBoxGroup.alignChildren = "top";                                    alignmentControls.graphics.backgroundColor = scriptControl.graphics.newBrush (scriptControl.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR                                    var alignmentBoxSubGroup = alignmentBoxGroup.add ("group");                                                                        alignmentBoxSubGroup.margins = [10,0,0,10];                                    alignmentBoxSubGroup.orientation = "column";                                    var topRow = alignmentBoxSubGroup.add ("group"); // GROUPS TOP ROW TOGETHER                                    var topLeftButton = topRow.add("iconbutton", undefined, ScriptUI.newImage (iconsTL.d,iconsTL.d,iconsTL.d,iconsTL.r),{style: "toolbutton", toggle: true}); // ADDS STATES                                    topLeftButton.value = true; // SETS TOP LEFT AS DEFAULT VALUE                                    var topRightButton = topRow.add("iconbutton", undefined, ScriptUI.newImage (iconsTR.d,iconsTR.d,iconsTR.d,iconsTR.r),{style: "toolbutton", toggle: true});                                                                        var bottomRow = alignmentBoxSubGroup.add ("group");                                                                        var bottomLeftButton = bottomRow.add("iconbutton", undefined, ScriptUI.newImage (iconsBL.d,iconsBL.d,iconsBL.d,iconsBL.r),{style: "toolbutton", toggle: true});                                    var bottomRightButton = bottomRow.add("iconbutton", undefined, ScriptUI.newImage (iconsBR.d,iconsBR.d,iconsBR.d,iconsBR.r),{style: "toolbutton", toggle: true});                                                                        // RADIO BUTTON BEHAVIOUR - ALIGNMENT                                    topLeftButton.onClick = function (){                                        topLeftButton.value = true;                                         topRightButton.value = false;                                         bottomLeftButton.value = false;                                         bottomRightButton.value = false;                                                                                sP_alignmentVertical = "top";                                        sP_alignmentHorizontal = "left";                                                                                modifySubProject();                                        updateCoreDatabase();                                    };                                                                        topRightButton.onClick = function (){                                        topLeftButton.value = false;                                         topRightButton.value = true;                                         bottomLeftButton.value = false;                                         bottomRightButton.value = false;                                                                                sP_alignmentVertical = "top";                                        sP_alignmentHorizontal = "right";                                                                                modifySubProject();                                        updateCoreDatabase();                                    };                                                                        bottomLeftButton.onClick = function (){                                        topLeftButton.value = false;                                        topRightButton.value = false;                                          bottomLeftButton.value = true;                                         bottomRightButton.value = false;                                                                                sP_alignmentVertical = "bottom";                                        sP_alignmentHorizontal = "left";                                                                                modifySubProject();                                        updateCoreDatabase();                                    };                                                                        bottomRightButton.onClick = function (){                                        topLeftButton.value = false;                                         topRightButton.value = false;                                         bottomLeftButton.value = false;                                          bottomRightButton.value = true;                                                                                                                sP_alignmentVertical = "bottom";                                        sP_alignmentHorizontal = "right";                                                                                modifySubProject();                                        updateCoreDatabase();                                    };                                                                        var alignmentBoxGuidesGroup = alignmentBoxGroup.add ("group");                                                                        alignmentBoxGuidesGroup.orientation = "column";                                    alignmentBoxGuidesGroup.margins = [20,10,0,0];                                    alignmentBoxGuidesGroup.alignChildren = "fill";                                                                        // GUIDES TICK BOXES                                    var guidesTitle = alignmentBoxGuidesGroup.add ("statictext", undefined, "Alignment Guide Options:");                                    guidesTitle.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    guidesTitle.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                         var outerGuides = alignmentBoxGuidesGroup.add ("Checkbox", undefined, "Show Outer  Guides");                                    outerGuides.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    outerGuides.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                                    outerGuides.value = sP_outerGuides;                                    outerGuides.onClick = function () {                                        sP_outerGuides = outerGuides.value;                                        if (sP_outerGuides == true) {                                            outerGuidesBoxA.opacity.setValue(35);                                            outerGuidesBoxB.opacity.setValue(35);                                        } else {                                            outerGuidesBoxA.opacity.setValue(0);                                            outerGuidesBoxB.opacity.setValue(0);                                        };                                        updateCoreDatabase();                                        };                                                                                                            var innerGuides = alignmentBoxGuidesGroup.add ("Checkbox", undefined, "Show  Inner  Guides");                                    innerGuides.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    innerGuides.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                                    innerGuides.value = sP_innerGuides;                                    innerGuides.onClick = function () {                                        sP_innerGuides = innerGuides.value;                                        if (sP_innerGuides == true) {                                            innerGuidesBox.opacity.setValue(35);                                        } else {                                            innerGuidesBox.opacity.setValue(0);                                        };                                        updateCoreDatabase();                                        };                                                                        var logoGuides = alignmentBoxGuidesGroup.add ("Checkbox", undefined, "Show  Logo  Guides");                                    logoGuides.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    logoGuides.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                                    logoGuides.value = sP_logoGuides;                                    logoGuides.onClick = function () {                                        sP_logoGuides = logoGuides.value;                                        if (sP_logoGuides == true) {                                            logoGuidesBox.opacity.setValue(35);                                        } else {                                            logoGuidesBox.opacity.setValue(0);                                        };                                        updateCoreDatabase();                                        };                                                                        var alignmentQuestion = alignmentBoxGuidesGroup.add ("button", undefined, "What does this mean?");                                    // USER GUIDE LINK                                    alignmentQuestion.onClick = function () {                                        tabs.selection = userGuide;                                         userGuidePage = 5;                                         userGuidePlaceholderA.image = ("image", undefined, File (imageFolder + userGuideArray[userGuidePage] + ".jpg"));                                        };                                                               alignmentControls.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                            alignmentControls.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                                                               var legalControls = boxProperties.add ("panel", undefined, "Legal");                                                                        var logoGroup = legalControls.add ("group");                                    logoGroup.orientation = "row";                                    var europeByImage = {d:File(imageFolder +"logo_europe.png"), r:File(imageFolder +"logo_europe_R.png")}                                    var businessByImage = {d:File(imageFolder +"logo_business.png"), r:File(imageFolder +"logo_business_R.png")}                                    var europeByButton = logoGroup.add("iconbutton", undefined, ScriptUI.newImage (europeByImage.d,europeByImage.d,europeByImage.d,europeByImage.r),{style: "toolbutton", toggle: true});                                    var businessByButton = logoGroup.add("iconbutton", undefined, ScriptUI.newImage (businessByImage.d,businessByImage.d,businessByImage.d,businessByImage.r),{style: "toolbutton", toggle: true});                                                                        // SETS TOP LEFT AS DEFAULT VALUE                                    if (sP_logoOption == "business") {                                               businessByButton.value = true;                                    }else{                                                    europeByButton.value = true;                                    };                                                                                                                                        // RADIO BUTTON BEHAVIOUR - LOGO                                    europeByButton.onClick = function (){                                                                                europeByButton.value = true;                                         businessByButton.value = false;                                         sP_logoOption = "europe";                                        logoLayer.replaceSource (projectItemAssetFolder.item(3), false)                                        modifySubProject();                                        updateCoreDatabase();                                        };                                                                         businessByButton.onClick = function (){                                                                                europeByButton.value = false;                                         businessByButton.value = true;                                                                                sP_logoOption = "business";                                                                                logoLayer.replaceSource (projectItemAssetFolder.item(2), false)                                        modifySubProject();                                                                                updateCoreDatabase();                                        };                                                                       // WHISKEY BOX                                   var legalTermsSliderBox = legalControls.add ("group");                                   var legalTermsLine = legalTermsSliderBox.add ("group");                                        var legalTermsStaticText = legalTermsLine.add ("statictext", undefined, "Terms and Conditions Size");                                        var legalTermsEditText =  legalTermsLine.add ("edittext", [0,0,50,18], sP_whiskey);                                    var legalTermsSliderGroup = legalControls.add ("group");                                    var legalTermsSlider = legalTermsSliderGroup.add ("slider", [0,0,380,22], sP_whiskey, 000, 500);                                                                                                    // SlLIDER INTERACTION - WHISKEY                                    legalTermsSlider.onChanging = function(){                                        sliderChange(legalTermsSlider);                                        legalTermsEditText.text = newValue;                                        sP_whiskey = Math.floor (legalTermsSlider.value) ;                                        modifySubProject();                                    };                                                                         legalTermsSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                         legalTermsEditText.onChanging = function (){                                                               editTextChanging(legalTermsEditText);                                        legalTermsSlider.value = newValue;                                        sP_whiskey = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                        // LOGO SIZE                                    var legalLogoLine = legalControls.add ("group");                                        var legalLogoStaticText = legalLogoLine.add ("statictext", undefined, "Logo Size");                                        var legalLogoEditText =  legalLogoLine.add ("edittext", [0,0,50,18], (sP_logoScale * 10));                                    var legalLogoSliderGroup = legalControls.add ("group");                                    var legalLogoSlider =legalLogoSliderGroup.add ("slider", [0,0,230,22], (sP_logoScale * 10), 20, 200);                                                                // SlLIDER INTERACTION                                    legalLogoSlider.onChanging = function(){                                        sliderChange(legalLogoSlider);                                        legalLogoEditText.text = newValue;                                        sP_logoScale = ((Math.floor (legalLogoSlider.value)) / 10) ;                                        modifySubProject();                                                                            };                                                                        legalLogoSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                         legalLogoEditText.onChange = function (){                                                               editTextChanging(legalLogoEditText);                                        legalLogoSlider.value = newValue;                                        sP_logoScale = (newValue / 10);                                        modifySubProject();                                        updateCoreDatabase();                                                                            };                                                                    var alignmentQuestion = legalLogoSliderGroup.add ("button", undefined, " What does this mean? ");                                    alignmentQuestion.onClick = function () {                                        tabs.selection = userGuide;                                         userGuidePage = 3;                                         userGuidePlaceholderA.image = ("image", undefined, File (imageFolder + userGuideArray[userGuidePage] + ".jpg"));                                        };                                                        // LEGAL - STYLE                                         legalControls.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                            legalControls.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                              legalControls.alignChildren = "left";                                legalTermsLine.margins = [0,10,0,0];                                legalTermsStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                legalTermsStaticText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                legalTermsEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                legalTermsEditText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                legalLogoLine.margins = [0,10,0,0];                                legalLogoStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                legalLogoStaticText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                legalLogoEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                legalLogoEditText.graphics.foregroundColor = orangeBox.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                        var textLayout = tabs.add ("tab",undefined,"Text Layout");                                var importContentButtonGroup = textLayout.add("group");                                importContentButtonGroup.margins = [0,10,0,10];                                var importContentEditText = importContentButtonGroup.add("edittext", [0,0,250,22], "/copy_doc/copy_doc_003.txt");                                var importContentButton = importContentButtonGroup.add("button", [0,0,150,22], "Import Content");                                                                // IMPORTS COPY DOC DATA                                importContentButton.onClick = function() {                                     try {                                        var importContentFile = File (projectPath + importContentEditText.text);                                        importContentFile.open('r'); // OPEN FILES                                                                                        temp = importContentFile.read() ;                                            var textDataContent = new XML (temp);                                                sP_textLengthArray = textDataContent.kind.length();                                                sP_textTagsArray = new Array;                                                sP_textValuesArray = new Array;                                                for (var i = (sP_textLengthArray - 1) ; i >= 0; i--) {                                                sP_textValuesArray.push(textDataContent.content[i]);                                                sP_textTagsArray.push(textDataContent.kind[i]);                                                }                                        importContentFile.close(); // CLOSES FILES                                        updateCoreDatabaseTextData();                                        updateCoreDatabaseModifyTags();                                        alert("Content Imported Successfully!");                                    } catch (err){                                       alert("Please Check File Path \r This path is relative to your AEP.");                                   }                                                                    };                                                    var textLayoutProperties = textLayout.add ("panel", undefined, "Text Size and Spacing Properties");                                textLayoutProperties.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                textLayoutProperties.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                        textLayoutProperties.alignChildren = "left";                                                                // 1 - TEXT SIZE                                   var textSizeLine = textLayoutProperties.add ("group");                                        var textSizeStaticText = textSizeLine.add ("statictext", undefined, "Text Size");                                        var textSizeEditText =  textSizeLine.add ("edittext", [0,0,50,18], sP_textSize);                                    var textSizeSliderGroup = textLayoutProperties.add ("group");                                    var textSizeSlider = textSizeSliderGroup.add ("slider", [0,0,380,22], sP_textSize, 10, 200);                                                                // SlLIDER INTERACTION                                    textSizeSlider.onChanging = function(){                                        sliderChange(textSizeSlider);                                        textSizeEditText.text = newValue;                                        sP_textSize = Math.floor (textSizeSlider.value) ;                                        modifySubProject();                                    };                                       textSizeSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    textSizeEditText.onChange = function (){                                                               editTextChanging(textSizeEditText);                                        textSizeSlider.value = newValue;                                        sP_textSize = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                    textSizeLine.margins = [0,10,0,0];                                    textSizeStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    textSizeStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    textSizeEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    textSizeEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                    // 2 - HEADING SIZE                                   var HSizeLine = textLayoutProperties.add ("group");                                        var HSizeStaticText = HSizeLine.add ("statictext", undefined, "Heading Size");                                        var HSizeEditText =  HSizeLine.add ("edittext", [0,0,50,18], sP_HSize);                                    var HSizeSliderGroup = textLayoutProperties.add ("group");                                    var HSizeSlider = HSizeSliderGroup.add ("slider", [0,0,380,22], sP_HSize, 10, 200);                                                                // SlLIDER INTERACTION                                    HSizeSlider.onChanging = function(){                                        sliderChange(HSizeSlider);                                        HSizeEditText.text = newValue;                                        sP_HSize = Math.floor (HSizeSlider.value) ;                                        modifySubProject();                                    };                                       HSizeSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    HSizeEditText.onChange = function (){                                                               editTextChanging(HSizeEditText);                                        HSizeSlider.value = newValue;                                        sP_HSize = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                    HSizeLine.margins = [0,10,0,0];                                    HSizeStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HSizeStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    HSizeEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HSizeEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                    // 3 - HEADING LINE-HEIGHT                                   var HLineHLine = textLayoutProperties.add ("group");                                        var HLineHStaticText = HLineHLine.add ("statictext", undefined, "Heading Line-Height");                                        var HLineHEditText =  HLineHLine.add ("edittext", [0,0,50,18], sP_HLineH);                                    var HLineHSliderGroup = textLayoutProperties.add ("group");                                    var HLineHSlider = HLineHSliderGroup.add ("slider", [0,0,380,22], sP_HLineH, 10, 200);                                                                // SlLIDER INTERACTION                                    HLineHSlider.onChanging = function(){                                        sliderChange(HLineHSlider);                                        HLineHEditText.text = newValue;                                        sP_HLineH = Math.floor (HLineHSlider.value) ;                                        modifySubProject();                                    };                                       HLineHSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    HLineHEditText.onChange = function (){                                                               editTextChanging(HLineHEditText);                                        HLineHSlider.value = newValue;                                        sP_HLineH = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                    HLineHLine.margins = [0,10,0,0];                                    HLineHStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HLineHStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    HLineHEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HLineHEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                    // 4 - HEADING PARAGRAPH SIZE                                   var HPSizeLine = textLayoutProperties.add ("group");                                        var HPSizeStaticText = HPSizeLine.add ("statictext", undefined, "Heading Paragraph Size");                                        var HPSizeEditText =  HPSizeLine.add ("edittext", [0,0,50,18], sP_HPSize);                                    var HPSizeSliderGroup = textLayoutProperties.add ("group");                                    var HPSizeSlider = HPSizeSliderGroup.add ("slider", [0,0,380,22], sP_HPSize, 10, 200);                                                                // SlLIDER INTERACTION                                    HPSizeSlider.onChanging = function(){                                        sliderChange(HPSizeSlider);                                        HPSizeEditText.text = newValue;                                        sP_HPSize = Math.floor (HPSizeSlider.value) ;                                        modifySubProject();                                    };                                       HPSizeSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    HPSizeEditText.onChange = function (){                                                               editTextChanging(HPSizeEditText);                                        HPSizeSlider.value = newValue;                                        sP_HPSize = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                        HPSizeLine.margins = [0,10,0,0];                                    HPSizeStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HPSizeStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    HPSizeEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HPSizeEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                    // 5 - HEADING PARAGRAPH LINE-HEIGHT                                   var HPLineHLine = textLayoutProperties.add ("group");                                        var HPLineHStaticText = HPLineHLine.add ("statictext", undefined, "Heading Paragraph Line-Height");                                        var HPLineHEditText =  HPLineHLine.add ("edittext", [0,0,50,18], sP_HPLineH);                                    var HPLineHSliderGroup = textLayoutProperties.add ("group");                                    var HPLineHSlider = HPLineHSliderGroup.add ("slider", [0,0,380,22], sP_HPLineH, 10, 200);                                                                // SlLIDER INTERACTION                                    HPLineHSlider.onChanging = function(){                                        sliderChange(HPLineHSlider);                                        HPLineHEditText.text = newValue;                                        sP_HPLineH = Math.floor (HPLineHSlider.value) ;                                        modifySubProject();                                    };                                       HPLineHSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    HPLineHEditText.onChange = function (){                                                               editTextChanging(HPLineHEditText);                                        HPLineHSlider.value = newValue;                                        sP_HPLineH = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                        HPLineHLine.margins = [0,10,0,0];                                    HPLineHStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HPLineHStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    HPLineHEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    HPLineHEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                    // 6 - SUB-HEADING SIZE                                   var SHSizeLine = textLayoutProperties.add ("group");                                        var SHSizeStaticText = SHSizeLine.add ("statictext", undefined, "Sub-Heading Size");                                        var SHSizeEditText =  SHSizeLine.add ("edittext", [0,0,50,18], sP_SHSize);                                    var SHSizeSliderGroup = textLayoutProperties.add ("group");                                    var SHSizeSlider = SHSizeSliderGroup.add ("slider", [0,0,380,22], sP_SHSize, 10, 200);                                                                // SlLIDER INTERACTION                                    SHSizeSlider.onChanging = function(){                                        sliderChange(SHSizeSlider);                                        SHSizeEditText.text = newValue;                                        sP_SHSize = Math.floor (SHSizeSlider.value) ;                                        modifySubProject();                                    };                                       SHSizeSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    SHSizeEditText.onChange = function (){                                                               editTextChanging(SHSizeEditText);                                        SHSizeSlider.value = newValue;                                        sP_SHSize = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                    SHSizeLine.margins = [0,10,0,0];                                    SHSizeStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    SHSizeStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    SHSizeEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    SHSizeEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                    // 7 - SUB-HEADING LINE HEIGHT                                   var SHLineHLine = textLayoutProperties.add ("group");                                        var SHLineHStaticText = SHLineHLine.add ("statictext", undefined, "Sub-Heading Line-Height");                                        var SHLineHEditText =  SHLineHLine.add ("edittext", [0,0,50,18], sP_SHLineH);                                    var SHLineHSliderGroup = textLayoutProperties.add ("group");                                    var SHLineHSlider = SHLineHSliderGroup.add ("slider", [0,0,380,22], sP_SHLineH, 10, 200);                                                                // SlLIDER INTERACTION                                    SHLineHSlider.onChanging = function(){                                        sliderChange(SHLineHSlider);                                        SHLineHEditText.text = newValue;                                        sP_SHLineH = Math.floor (SHLineHSlider.value) ;                                        modifySubProject();                                    };                                       SHLineHSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    SHLineHEditText.onChange = function (){                                                               editTextChanging(SHLineHEditText);                                        SHLineHSlider.value = newValue;                                        sP_SHLineH = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                    SHLineHLine.margins = [0,10,0,0];                                    SHLineHStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    SHLineHStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    SHLineHEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    SHLineHEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                    // 8 HEADING TO BODY GAP                                   var H2BGLine = textLayoutProperties.add ("group");                                        var H2BGStaticText = H2BGLine.add ("statictext", undefined, "Heading to Body Gap");                                        var H2BGEditText =  H2BGLine.add ("edittext", [0,0,50,18], sP_H2BG);                                    var H2BGSliderGroup = textLayoutProperties.add ("group");                                    var H2BGSlider = H2BGSliderGroup.add ("slider", [0,0,380,22], sP_H2BG, 10, 200);                                                                // SlLIDER INTERACTION                                    H2BGSlider.onChanging = function(){                                        sliderChange(H2BGSlider);                                        H2BGEditText.text = newValue;                                        sP_H2BG = Math.floor (H2BGSlider.value) ;                                        modifySubProject();                                    };                                       H2BGSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    H2BGEditText.onChange = function (){                                                               editTextChanging(H2BGEditText);                                        H2BGSlider.value = newValue;                                        sP_H2BG = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                    H2BGLine.margins = [0,10,0,0];                                    H2BGStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    H2BGStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    H2BGEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    H2BGEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                                             // 9 - PRICE LOCK-UP SIZE                                   var PLSizeLine = textLayoutProperties.add ("group");                                        var PLSizeStaticText = PLSizeLine.add ("statictext", undefined, "Price Lock-Up Size");                                        var PLSizeEditText =  PLSizeLine.add ("edittext", [0,0,50,18], sP_PLSize);                                    var PLSizeSliderGroup = textLayoutProperties.add ("group");                                    var PLSizeSlider = PLSizeSliderGroup.add ("slider", [0,0,380,22], sP_PLSize, 10, 200);                                                                // SlLIDER INTERACTION                                    PLSizeSlider.onChanging = function(){                                        sliderChange(PLSizeSlider);                                        PLSizeEditText.text = newValue;                                        sP_PLSize = Math.floor (PLSizeSlider.value) ;                                        modifySubProject();                                    };                                       PLSizeSlider.onChange = function(){                                        updateCoreDatabase();                                    };                                                                                                                                    PLSizeEditText.onChange = function (){                                                               editTextChanging(PLSizeEditText);                                        PLSizeSlider.value = newValue;                                        sP_PLSize = newValue;                                        modifySubProject();                                        updateCoreDatabase();                                    };                                                                    PLSizeLine.margins = [0,10,0,0];                                    PLSizeStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    PLSizeStaticText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                    PLSizeEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT                                    PLSizeEditText.graphics.foregroundColor = textLayoutProperties.graphics.newPen (scriptControl.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR                                                                                                                                                                                                                           var motionControls = tabs.add ("tab",undefined,"Motion Controls");                                               motionControls.alignChildren = "fill";                        motionControls.graphics.backgroundColor = scriptControl.graphics.newBrush (scriptControl.graphics.BrushType.SOLID_COLOR, [1,1,1]); // TAB BACK COLOUR                        scriptControl.show ();}// CHECKS SUBPROJECT ITEMS EXSISTfunction secondaryVerificationRouteA () {            // TODO: CHECK FOR PROJECVT ITEMS           projectLevelBuild();}// BUILDS PROJECT LEVEL ITEMS AND DATABASESfunction projectLevelBuild () {            // CREATES DATABASES            //ARCHITECTURAL VARIABLES        newProject = true;                // DEFAULT DATABASE - STORED IN SCRIPT UI FOLDER        var storedCoreData =  File (scriptDirectory + "structural_test_004_coreDatabase.xml");        var storedPresetsData =  File (scriptDirectory + "structural_test_004_presetsDatabase.xml");        var storedVersionData =  File (scriptDirectory + "structural_test_004_versionDatabase.xml");                //BUILDS NEW DATABASE        var newCoreData = new File(projectPath+"/"+projectName+"_"+"coreDatabase"+"_"+scriptName+".xml");        var newPresetsData = new File(projectPath+"/"+projectName+"_"+"presetsDatabase"+"_"+scriptName+".xml");        var newVersionData = new File(projectPath+"/"+projectName+"_"+"versionDatabase"+"_"+scriptName+".xml");                // IMPORTS DEFAULT CORE DATA        storedCoreData.open('r');            var storedCoreDataContent = storedCoreData.read();        storedCoreData.close();                newCoreData.open('w');            newCoreData.write(storedCoreDataContent);        newCoreData.close();              // IMPORTS DEFAULT PRESETS DATA        storedPresetsData.open('r');            var storedPresetsDataContent = storedPresetsData.read();        storedPresetsData.close();                newPresetsData.open('w');            newPresetsData.write(storedPresetsDataContent);        newPresetsData.close();                      // IMPORTS DEFAULT VERSION DATA        storedVersionData.open('r');            var storedVersionDataContent = storedVersionData.read();        storedVersionData.close();                newVersionData.open('w');            newVersionData.write(storedVersionDataContent);        newVersionData.close();                   //SETS VERSION SETTINGS        projectVersionNumber = scriptVersionNumber;        scriptVersionValid = "Valid";        creationUI ();    }// CHECKS DATAVBASE EXISTANCEfunction detectDatabase (){    // TESTS THAT CORE DATA EXISTS        // VERIFICATION & VERSION CONTROL    if (coreDataName.exists && versionDataName.exists && presetsDataName.exists) {                //ARCHITECTURAL VARIABLES        newProject = false;        updateProject = false;                // VERION CONTROL                 // IMPORT VERSION DETAILS        versionDataName.open('r'); // OPEN FILES             temp = versionDataName.read() ;            var versionDataContent = new XML (temp);                 projectVersionNumber = versionDataContent.projectVersionNumber[0];        versionDataName.close(); // CLOSES FILES                // IMPORT PRESETS NAMES        importPresetNames();                                // TESTS IF VERSION IS VALID OR NOT        if (projectVersionNumber < scriptVersionNumber){            scriptVersionValid = "Invalid";            }else{            scriptVersionValid = "Valid";            }                // CREATION    } else if (!coreDataName.exists && !versionDataName.exists && !presetsDataName.exists) {    secondaryVerificationRouteA();    // PRIMARY VERIFICATION - ARE ANY OF THE DATABASES MISSING       } else {        alert("WTF! You are missing database files!");    }; }// INPUT INFOMATION FOR BUILD SCRIPT AND DETECT SETTINGSfunction creationUI () {        // VALUES    // ARCHITECTURAL VALUES        activeSubPoject = app.project.activeItem;    updateProject = false;        // IMPORT PRESETS NAMES    importPresetNames();        // FUNCTIONS        function newUniqueID () {    var date = new Date(Date(0));    var time = date.getTime();    sP_ID = time;            }            newUniqueID ();    function activeSubProjectSettings () {                        sP_projectNumber = projectNumberEditText.text;            sP_creativeTitle = creativeArtworkEditText.text;            sP_location = locationEditText.text;            sP_compWidth = activeSubPoject.width;            sP_compHeight = activeSubPoject.height;            sP_compLength = activeSubPoject.duration;            sP_pixel = 1;            sP_FPS =activeSubPoject.frameRate;                        sP_name = (sP_projectNumber + "-" + sP_location + "-" + sP_creativeTitle + "-" + sP_compLength + "s" + "-" + sP_compWidth+ "x" +  sP_compHeight)                 }        // BUILD INTERFACE    var buildScriptInput = new Window ("palette", "Project Info");    buildScriptInput.graphics.backgroundColor = buildScriptInput.graphics.newBrush (buildScriptInput.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR    buildScriptInput.margins = [20,20,20,20];    buildScriptInput.alignChildren = "left";        var header = buildScriptInput.add ("image", undefined, File ("/Applications/Adobe After Effects CS5/Scripts/ScriptUI Panels/easyjet_003/header.jpg"));        var projectNumberLine = buildScriptInput.add ("group");            var projectNumberStaticText = projectNumberLine.add ("statictext", undefined, "Project Number");            var projectNumberEditText =  projectNumberLine.add ("edittext", [0,0,327,18], "EASV0XXX");        var creativeArtworkLine = buildScriptInput.add ("group");            var creativeArtworkStaticText = creativeArtworkLine.add ("statictext", undefined, "Creative Artwork");            var creativeArtworkEditText =  creativeArtworkLine.add ("edittext", [0,0,322,18], "dadTime");        var locationLine = buildScriptInput.add ("group");            var locationStaticText = locationLine.add ("statictext", undefined, "Location");            var locationEditText =  locationLine.add ("edittext", [0,0,372,18], "Edinburgh");                    var buildScriptInputNew = buildScriptInput.add("group");                var buildScriptInputNewDropDown = buildScriptInputNew.add ("dropdownlist", [0,0,440,20], presetsNamesArray);            buildScriptInputNewDropDown.selection = 0;        projectNumberLine.margins = [0,10,0,0];            projectNumberStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT            projectNumberStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR            projectNumberEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT            projectNumberEditText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR        creativeArtworkLine.margins = [0,10,0,0];            creativeArtworkStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT            creativeArtworkStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR            creativeArtworkEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT            creativeArtworkEditText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR        locationLine.margins = [0,10,0,0];            locationStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT            locationStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR            locationEditText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT            locationEditText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, eJDark,1); // FONT COLOUR        var projectDetectedDataBundle = buildScriptInput.add ("group", undefined, "Detected Data");            if (activeSubPoject == null) {            var projectDetectedData = projectDetectedDataBundle.add ("group");                var projectDetectedDataTitle = projectDetectedData.add ("statictext", undefined, ("Please Open Composition to Run"+" "+" "+" "+" "+" "+" "+" "+" "+" "+" "+" "+" "+" "));                var compWidthStaticText = projectDetectedData.add ("statictext", undefined, (". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . "));                var compHeightStaticText = projectDetectedData.add ("statictext", undefined, (". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . "));                var compLengthStaticText = projectDetectedData.add ("statictext", undefined, (". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . "));                var uniqueIdentifier = projectDetectedData.add ("statictext", undefined, ("ID: " + sP_ID));                        projectDetectedDataTitle.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,0,0],1); // FONT COLOUR                compWidthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,1,1],1); // FONT COLOUR                compHeightStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,1,1],1); // FONT COLOUR                compLengthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,1,1],1); // FONT COLOUR                uniqueIdentifier.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                            } else {            var projectDetectedData = projectDetectedDataBundle.add ("group");                var projectDetectedDataTitle = projectDetectedData.add ("statictext", undefined, ("Detected Data: From Your Composition"+" "+" "+" "+" "+" "+" "+" "+" "+" "+" "+" "+" "));                var compWidthStaticText = projectDetectedData.add ("statictext", undefined, ("Width: " + activeSubPoject.width + "px"));                var compHeightStaticText = projectDetectedData.add ("statictext", undefined, ("Height: " + activeSubPoject.height + "px"));                var compLengthStaticText = projectDetectedData.add ("statictext", undefined, ("Length: " + activeSubPoject.duration + " seconds"));                var uniqueIdentifier = projectDetectedData.add ("statictext", undefined, ("ID: " + sP_ID));                projectDetectedDataTitle.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                compWidthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                compHeightStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                compLengthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                uniqueIdentifier.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR            };                projectDetectedData.orientation ="column";        projectDetectedData.alignChildren = "left";                projectDetectedDataTitle.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT        compWidthStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT        compHeightStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT        compLengthStaticText.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT        uniqueIdentifier.graphics.font = ScriptUI.newFont ("easyJet Rounded Book", "Bold",14); // FONT           var confirmBuildScriptInput = buildScriptInput.add ("group");        refreshDataButton = confirmBuildScriptInput.add ("button",undefined, "Refresh");        cancelBuildScriptInputButton = confirmBuildScriptInput.add ("button",undefined, "Cancel");        confirmBuildScriptInputButton = confirmBuildScriptInput.add ("button", undefined, "OK");                confirmBuildScriptInput.margins = [180,00,0,0];                confirmBuildScriptInputButton.onClick = function () {            activeSubPoject = app.project.activeItem;            selectedPreset = buildScriptInputNewDropDown.selection.index;            if (activeSubPoject == null) {                        alert("Open a composition Bitch.. I told you once!");                    }else if (newProject = true){                        coreDatabaseActiveIndex = 0;                        pluginArrayPosition = 0;                        activeSubProjectItem = 0;                        activeSubProjectSettings();                         buildScriptInput.close();                        importPresetsNewProject();                                                                    }else if (newProject = false){                        activeSubProjectSettings();                         alert("SEND TO VERIFICATION - UNDER CONSTRUCTION");                                            }else {                           alert("Error - confirmBuildScriptInputButton.onClick: \r New Project VAR is not set");                    };                            };        cancelBuildScriptInputButton.onClick = function () {            errorControlA ();            buildScriptInput.close();            };        refreshDataButton.onClick = function () {            activeSubPoject = app.project.activeItem;                                      if (activeSubPoject == null) {                    projectDetectedDataTitle.text = ("Please Open Composition to Run");                    compWidthStaticText.text = (". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ");                    compHeightStaticText.text = (". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ");                    compLengthStaticText.text = (". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ");                    uniqueIdentifier.text = ("ID: " + sP_ID);                      projectDetectedDataTitle.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,0,0],1); // FONT COLOUR                    compWidthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,1,1],1); // FONT COLOUR                    compHeightStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,1,1],1); // FONT COLOUR                    compLengthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [1,1,1],1); // FONT COLOUR                    uniqueIdentifier.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                } else {                    projectDetectedDataTitle.text = ("Detected Data: From Your Composition");                    compWidthStaticText.text = ("Width: " + activeSubPoject.width + "px");                    compHeightStaticText.text = ("Height: " + activeSubPoject.height + "px");                    compLengthStaticText.text = ("Length: " + activeSubPoject.duration + " seconds");                    uniqueIdentifier.text = ("ID: " + sP_ID);                    projectDetectedDataTitle.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                    compWidthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                    compHeightStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                    compLengthStaticText.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                    uniqueIdentifier.graphics.foregroundColor = buildScriptInput.graphics.newPen (buildScriptInput.graphics.PenType.SOLID_COLOR, [0.5,0.5,0.5],1); // FONT COLOUR                };                                    };                                            buildScriptInput.show ();    }detectDatabase ();}function runScript () {        var runPluginsUI = new Window ("palette", "Select Script");     runPluginsUI.margins = [20,20,20,20];    var lineOne = runPluginsUI. add ("group");    var EJOD001 = lineOne.add("button", undefined, "EasyJet Outdoor Script");        EJOD001.onClick = function () {        runPluginsUI.close();        EJODOne ();        };    runPluginsUI.show();    };runScript ();