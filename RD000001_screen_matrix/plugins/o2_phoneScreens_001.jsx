// KEY VARIABLES    var specs = {                    space: {rows: 3, columns: 3, units: 0 },            tile: {width: 960, height: 640},            margin_inner: {x: 439, y: 113,},            margin_outer: {x: 50, y: 50},            margin_total: {x: 489, y: 163},            comp: {width: 0, height: 0, time: 30, fps: 25}                    };        var positions = {                    name: "box1",            row: 1,             column: 1,             top: 0,            bottom: 0,            left: 0,            right: 0                                };        // USER INTERFACEformData = function () {var scriptControl = new Window ("palette", "easyJet Script");            scriptControl.graphics.backgroundColor = scriptControl.graphics.newBrush (scriptControl.graphics.BrushType.SOLID_COLOR, [1,1,1]); // BACKGROUND COLOUR            scriptControl.margins = [20,20,20,20]; // BOX MARGINS                        var imageFolder = (new File($.fileName)).parent + "/o2_phoneScreens_001/";            var header = scriptControl.add ("image", undefined, File (imageFolder + "header.jpg"));                                 var UI_Space = scriptControl.add("panel", undefined, "Layout");                 UI_Space.orientation = "row";                 UI_Space.margins = [20,20,20,20];                    var UI_SpaceRows = UI_Space.add ("statictext", [0,0,30,20], "Rows");                    var UI_SpaceRowsInput = UI_Space.add ("edittext", [0,0,140,20], specs.space.rows);                    var UI_SpaceColumns = UI_Space.add ("statictext", [0,0,50,20], "Columns");                    var UI_SpaceColumnsInput = UI_Space.add ("edittext", [0,0,140,20], specs.space.columns);                                    var UI_Tile = scriptControl.add("panel", undefined, "Screen");                 UI_Tile.orientation = "row";                 UI_Tile.margins = [20,20,20,20];                    var UI_TileWidth = UI_Tile.add ("statictext", [0,0,30,20], "Width");                    var UI_TileWidthInput = UI_Tile.add ("edittext", [0,0,140,20], specs.tile.width);                    var UI_TileHeight = UI_Tile.add ("statictext", [0,0,50,20], "Height");                    var UI_TileHeightInput = UI_Tile.add ("edittext", [0,0,140,20], specs.tile.height);                                     var UI_MarI = scriptControl.add("panel", undefined, "Inner Margins");                 UI_MarI.orientation = "row";                 UI_MarI.margins = [20,20,20,20];                    var UI_MarIWidth = UI_MarI.add ("statictext", [0,0,30,20], "Width");                    var UI_MarIWidthInput = UI_MarI.add ("edittext", [0,0,140,20], specs.margin_inner.x);                    var UI_MarIHeight = UI_MarI.add ("statictext", [0,0,50,20], "Height");                    var UI_MarIHeightInput = UI_MarI.add ("edittext", [0,0,140,20], specs.margin_inner.y);                                    var UI_MarO = scriptControl.add("panel", undefined, "Outer Margins");                 UI_MarO.orientation = "row";                 UI_MarO.margins = [20,20,20,20];                    var UI_MarOWidth = UI_MarO.add ("statictext", [0,0,30,20], "Width");                    var UI_MarOWidthInput = UI_MarO.add ("edittext", [0,0,140,20], specs.margin_outer.x);                    var UI_MarOHeight = UI_MarO.add ("statictext", [0,0,50,20], "Height");                    var UI_MarOHeightInput = UI_MarO.add ("edittext", [0,0,140,20], specs.margin_outer.y);                                    var UI_Comp = scriptControl.add("panel", undefined, "Comp");                 UI_Comp.orientation = "row";                 UI_Comp.margins = [20,20,20,20];                    var UI_CompLength = UI_Comp.add ("statictext", [0,0,60,20], "Length (s)");                    var UI_CompLengthInput = UI_Comp.add ("edittext", [0,0,110,20], specs.comp.time);                    var UI_CompFPS = UI_Comp.add ("statictext", [0,0,50,20], "FPS");                    var UI_CompFPSInput = UI_Comp.add ("edittext", [0,0,140,20], specs.comp.fps);                                  var scriptControlBuild = scriptControl.add("group");                    var scriptControlBuildButton = scriptControlBuild.add ("button", [0,0,440,20], "BUILD");                                                                            // EXIT                    scriptControlBuildButton.onClick = function () {                                                      setData();                           scriptControl.close();                };                 setData = function () {                        // MAIN CALUCLATIONS                        specs.space.rows = parseInt(UI_SpaceRowsInput.text);                        specs.space.columns = parseInt(UI_SpaceColumnsInput.text);                        specs.space.units = (specs.space.rows * specs.space.columns);                                                specs.tile.width = parseInt(UI_TileWidthInput.text);                        specs.tile.height = parseInt(UI_TileHeightInput.text);                                                specs.margin_inner.x = parseInt(UI_MarIWidthInput.text);                        specs.margin_inner.y = parseInt(UI_MarIHeightInput.text);                                                specs.margin_outer.x = parseInt(UI_MarOWidthInput.text);                        specs.margin_outer.y = parseInt(UI_MarOHeightInput.text);                                                specs.margin_total.x = specs.margin_inner.x + specs.margin_outer.x;                        specs.margin_total.y = specs.margin_inner.y + specs.margin_outer.y;                                                specs.comp.width = ((specs.tile.width + specs.margin_total.x)*(specs.space.columns)) + specs.margin_total.x ;                        specs.comp.height = ((specs.tile.height + specs.margin_total.y)*(specs.space.rows)) + specs.margin_total.y ;                        specs.comp.time = parseInt(UI_CompLengthInput.text);                        specs.comp.fps = parseInt(UI_CompFPSInput.text);                                                buildScript();                }   scriptControl.show ();}formData ();buildScript = function () {    //SETUP        //CREATE STRUCTURAL COMP        var newCompStructural = app.project.items.addComp("Structural Comp", specs.comp.width, specs.comp.height, 1, specs.comp.time, specs.comp.fps);                // CREATES CREATIVE COMP        var newCompCreative = app.project.items.addComp("Creative Comp", specs.comp.width, specs.comp.height, 1, specs.comp.time, specs.comp.fps);                //  CREATES INTERMIDIEARY COMP        var newCompIntermediary = app.project.items.addComp("Intermediary Comp", specs.comp.width, specs.comp.height, 1, specs.comp.time, specs.comp.fps);                // PUTS CREATIVE IN INTER        var creativeCollection = newCompIntermediary.layers.add(newCompCreative);                // PUTS STRUCTUAL IN INTER        var structuralCollection = newCompIntermediary.layers.add(newCompStructural);                // BLACK SOLID        newCompStructural.layers.addSolid([0,0,0], "black", specs.comp.width, specs.comp.height, 1, specs.comp.time );                // FOLDER STRUCTRE                var projectFolder =  app.project.items.addFolder("New Project Folder");        var exportstFolder =  app.project.items.addFolder("Exports Folder");        newCompStructural.parentFolder = projectFolder ;        newCompCreative.parentFolder = projectFolder ;        newCompIntermediary.parentFolder = projectFolder ;        exportstFolder.parentFolder = projectFolder ;// LOOP        for (i=1 ; i < specs.space.units + 1 ; i++) {        // CALCULATE POSITIONS FOR I                                       positions.row = Math.floor(( i / specs.space.columns)-0.001) + 1;        positions.column = i - ((positions.row - 1) * specs.space.columns);        //LEFT        positions.left = (positions.column * (specs.tile.width + specs.margin_total.x)) - specs.tile.width;         //RIGHT        positions.right = positions.column * (specs.tile.width + specs.margin_total.x);        //TOP        positions.top = (positions.row  * (specs.tile.height + specs.margin_total.y)) -  specs.tile.height;        //BOTTOM        positions.bottom = positions.row  * (specs.tile.height + specs.margin_total.y);        // ADD LAYER TO STRUCTURAL  COMP        newCompStructural.layers.addSolid([1,1,1], "box" + i, specs.comp.width, specs.comp.height, 1, specs.comp.time );            newCompStructural.layer(1) ("Effects").addProperty("Corner Pin");                       newCompStructural.layer(1) ("Effects").property("Corner Pin").property("Upper Left").setValue([positions.left,positions.top]);        newCompStructural.layer(1) ("Effects").property("Corner Pin").property("Upper Right").setValue([positions.right,positions.top]);        newCompStructural.layer(1) ("Effects").property("Corner Pin").property("Lower Left").setValue([positions.left,positions.bottom]);        newCompStructural.layer(1) ("Effects").property("Corner Pin").property("Lower Right").setValue([positions.right,positions.bottom]);                        // CREATE EXPORT COMP                      var newCompExport = app.project.items.addComp("Export_box"+i, specs.tile.width, specs.tile.height, 1, specs.comp.time, specs.comp.fps);        newCompExport.parentFolder = exportstFolder ;                        // CREATE LAYER COLLECTION OF  INTER COMP IN EXPORT COMP        var exportCollection = newCompExport.layers.add(newCompIntermediary);        newCompExport.layer(1).position.setValue([(positions.left*-1) , (positions.top*-1)]);        newCompExport.layer(1).anchorPoint.setValue([0,0]);                        //REPOSITION LAYER COLLECTION        };//alert("Script Built");    }